// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/question.proto at 11:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / 質問
 */
public final class Question extends Message<Question, Question.Builder> {
  public static final ProtoAdapter<Question> ADAPTER = new ProtoAdapter_Question();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final AnswerType DEFAULT_ANSWERTYPE = AnswerType.UNKNOWN;

  public static final String DEFAULT_CONTENT = "";

  /**
   * / 質問ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / 回答形式
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.Question$AnswerType#ADAPTER"
  )
  public final AnswerType answerType;

  /**
   * / 質問内容
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  /**
   * / 選択肢
   */
  @WireField(
      tag = 6,
      adapter = "tv.abema.protos.Choice#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Choice> choices;

  public Question(String id, AnswerType answerType, String content, List<Choice> choices) {
    this(id, answerType, content, choices, ByteString.EMPTY);
  }

  public Question(String id, AnswerType answerType, String content, List<Choice> choices, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.answerType = answerType;
    this.content = content;
    this.choices = Internal.immutableCopyOf("choices", choices);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.answerType = answerType;
    builder.content = content;
    builder.choices = Internal.copyOf("choices", choices);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Question)) return false;
    Question o = (Question) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(answerType, o.answerType)
        && Internal.equals(content, o.content)
        && Internal.equals(choices, o.choices);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (answerType != null ? answerType.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (choices != null ? choices.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (answerType != null) builder.append(", answerType=").append(answerType);
    if (content != null) builder.append(", content=").append(content);
    if (choices != null) builder.append(", choices=").append(choices);
    return builder.replace(0, 2, "Question{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Question, Builder> {
    public String id;

    public AnswerType answerType;

    public String content;

    public List<Choice> choices;

    public Builder() {
      choices = Internal.newMutableList();
    }

    /**
     * / 質問ID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / 回答形式
     */
    public Builder answerType(AnswerType answerType) {
      this.answerType = answerType;
      return this;
    }

    /**
     * / 質問内容
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    /**
     * / 選択肢
     */
    public Builder choices(List<Choice> choices) {
      Internal.checkElementsNotNull(choices);
      this.choices = choices;
      return this;
    }

    @Override
    public Question build() {
      return new Question(id, answerType, content, choices, buildUnknownFields());
    }
  }

  public enum AnswerType implements WireEnum {
    /**
     * / 不明
     */
    UNKNOWN(0),

    /**
     * / 選択形式
     */
    CHOICE(1),

    /**
     * / 自由形式
     */
    FREE(2);

    public static final ProtoAdapter<AnswerType> ADAPTER = ProtoAdapter.newEnumAdapter(AnswerType.class);

    private final int value;

    AnswerType(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static AnswerType fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return CHOICE;
        case 2: return FREE;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_Question extends ProtoAdapter<Question> {
    ProtoAdapter_Question() {
      super(FieldEncoding.LENGTH_DELIMITED, Question.class);
    }

    @Override
    public int encodedSize(Question value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.answerType != null ? AnswerType.ADAPTER.encodedSizeWithTag(2, value.answerType) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.content) : 0)
          + Choice.ADAPTER.asRepeated().encodedSizeWithTag(6, value.choices)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Question value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.answerType != null) AnswerType.ADAPTER.encodeWithTag(writer, 2, value.answerType);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.content);
      if (value.choices != null) Choice.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.choices);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Question decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: {
            try {
              builder.answerType(AnswerType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.choices.add(Choice.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Question redact(Question value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.choices, Choice.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
