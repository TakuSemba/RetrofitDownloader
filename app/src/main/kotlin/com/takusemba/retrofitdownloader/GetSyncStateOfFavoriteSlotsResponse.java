// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/sync.proto at 13:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / GetSyncStateOfFavoriteSlotsResponse represents a response of getting sync state.
 */
public final class GetSyncStateOfFavoriteSlotsResponse extends Message<GetSyncStateOfFavoriteSlotsResponse, GetSyncStateOfFavoriteSlotsResponse.Builder> {
  public static final ProtoAdapter<GetSyncStateOfFavoriteSlotsResponse> ADAPTER = new ProtoAdapter_GetSyncStateOfFavoriteSlotsResponse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UPDATECOUNT = 0L;

  public static final Long DEFAULT_FULLSYNCBEFORE = 0L;

  /**
   * / The highest USN given out within the user.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long updateCount;

  /**
   * / The cut-off date for old caching clients to perform an incremental (vs. full) synchronization.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long fullSyncBefore;

  public GetSyncStateOfFavoriteSlotsResponse(Long updateCount, Long fullSyncBefore) {
    this(updateCount, fullSyncBefore, ByteString.EMPTY);
  }

  public GetSyncStateOfFavoriteSlotsResponse(Long updateCount, Long fullSyncBefore, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.updateCount = updateCount;
    this.fullSyncBefore = fullSyncBefore;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.updateCount = updateCount;
    builder.fullSyncBefore = fullSyncBefore;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetSyncStateOfFavoriteSlotsResponse)) return false;
    GetSyncStateOfFavoriteSlotsResponse o = (GetSyncStateOfFavoriteSlotsResponse) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(updateCount, o.updateCount)
        && Internal.equals(fullSyncBefore, o.fullSyncBefore);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (updateCount != null ? updateCount.hashCode() : 0);
      result = result * 37 + (fullSyncBefore != null ? fullSyncBefore.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (updateCount != null) builder.append(", updateCount=").append(updateCount);
    if (fullSyncBefore != null) builder.append(", fullSyncBefore=").append(fullSyncBefore);
    return builder.replace(0, 2, "GetSyncStateOfFavoriteSlotsResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetSyncStateOfFavoriteSlotsResponse, Builder> {
    public Long updateCount;

    public Long fullSyncBefore;

    public Builder() {
    }

    /**
     * / The highest USN given out within the user.
     */
    public Builder updateCount(Long updateCount) {
      this.updateCount = updateCount;
      return this;
    }

    /**
     * / The cut-off date for old caching clients to perform an incremental (vs. full) synchronization.
     */
    public Builder fullSyncBefore(Long fullSyncBefore) {
      this.fullSyncBefore = fullSyncBefore;
      return this;
    }

    @Override
    public GetSyncStateOfFavoriteSlotsResponse build() {
      return new GetSyncStateOfFavoriteSlotsResponse(updateCount, fullSyncBefore, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetSyncStateOfFavoriteSlotsResponse extends ProtoAdapter<GetSyncStateOfFavoriteSlotsResponse> {
    ProtoAdapter_GetSyncStateOfFavoriteSlotsResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, GetSyncStateOfFavoriteSlotsResponse.class);
    }

    @Override
    public int encodedSize(GetSyncStateOfFavoriteSlotsResponse value) {
      return (value.updateCount != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.updateCount) : 0)
          + (value.fullSyncBefore != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.fullSyncBefore) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetSyncStateOfFavoriteSlotsResponse value) throws IOException {
      if (value.updateCount != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.updateCount);
      if (value.fullSyncBefore != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.fullSyncBefore);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetSyncStateOfFavoriteSlotsResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.updateCount(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.fullSyncBefore(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetSyncStateOfFavoriteSlotsResponse redact(GetSyncStateOfFavoriteSlotsResponse value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
