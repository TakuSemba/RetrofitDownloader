// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/video.proto at 12:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / ビデオ番組
 */
public final class VideoProgram extends Message<VideoProgram, VideoProgram.Builder> {
  public static final ProtoAdapter<VideoProgram> ADAPTER = new ProtoAdapter_VideoProgram();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final Long DEFAULT_IMAGEUPDATEDAT = 0L;

  public static final Long DEFAULT_ENDAT = 0L;

  public static final Long DEFAULT_FREEENDAT = 0L;

  public static final String DEFAULT_TRANSCODEVERSION = "";

  /**
   * / 番組ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / シリーズ
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.VideoSeriesInfo#ADAPTER"
  )
  public final VideoSeriesInfo series;

  /**
   * / シーズン
   */
  @WireField(
      tag = 3,
      adapter = "tv.abema.protos.VideoSeason#ADAPTER"
  )
  public final VideoSeason season;

  /**
   * / ジャンル
   */
  @WireField(
      tag = 4,
      adapter = "tv.abema.protos.VideoGenre#ADAPTER"
  )
  public final VideoGenre genre;

  /**
   * / 番組情報
   */
  @WireField(
      tag = 5,
      adapter = "tv.abema.protos.VideoProgramInfo#ADAPTER"
  )
  public final VideoProgramInfo info;

  /**
   * / 納品情報
   */
  @WireField(
      tag = 6,
      adapter = "tv.abema.protos.VideoProgramProvidedInfo#ADAPTER"
  )
  public final VideoProgramProvidedInfo providedInfo;

  /**
   * / エピソード
   */
  @WireField(
      tag = 7,
      adapter = "tv.abema.protos.VideoProgramEpisode#ADAPTER"
  )
  public final VideoProgramEpisode episode;

  /**
   * / クレジット
   */
  @WireField(
      tag = 8,
      adapter = "tv.abema.protos.VideoProgramCredit#ADAPTER"
  )
  public final VideoProgramCredit credit;

  /**
   * / メディアステータス
   */
  @WireField(
      tag = 9,
      adapter = "tv.abema.protos.VideoProgramMediaStatus#ADAPTER"
  )
  public final VideoProgramMediaStatus mediaStatus;

  /**
   * / ラベル
   */
  @WireField(
      tag = 10,
      adapter = "tv.abema.protos.VideoProgramLabel#ADAPTER"
  )
  public final VideoProgramLabel label;

  /**
   * / 画像更新UNIX時間
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long imageUpdatedAt;

  /**
   * / 視聴期限UNIX時間
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long endAt;

  /**
   * / 無料視聴期限UNIX時間
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long freeEndAt;

  /**
   * / トランスコードバージョン
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String transcodeVersion;

  /**
   * / 番組の共有リンク
   */
  @WireField(
      tag = 15,
      adapter = "tv.abema.protos.VideoProgramSharedLink#ADAPTER"
  )
  public final VideoProgramSharedLink sharedLink;

  /**
   * / 番組の再生情報
   */
  @WireField(
      tag = 16,
      adapter = "tv.abema.protos.ProgramPlayback#ADAPTER"
  )
  public final ProgramPlayback playback;

  /**
   * / 視聴ポイント
   */
  @WireField(
      tag = 17,
      adapter = "tv.abema.protos.ProgramViewingPoint#ADAPTER"
  )
  public final ProgramViewingPoint viewingPoint;

  /**
   * / 次のエピソード情報
   */
  @WireField(
      tag = 18,
      adapter = "tv.abema.protos.NextProgramInfo#ADAPTER"
  )
  public final NextProgramInfo nextProgramInfo;

  /**
   * / ダウンロード情報
   */
  @WireField(
      tag = 19,
      adapter = "tv.abema.protos.ProgramDownload#ADAPTER"
  )
  public final ProgramDownload download;

  public VideoProgram(String id, VideoSeriesInfo series, VideoSeason season, VideoGenre genre, VideoProgramInfo info, VideoProgramProvidedInfo providedInfo, VideoProgramEpisode episode, VideoProgramCredit credit, VideoProgramMediaStatus mediaStatus, VideoProgramLabel label, Long imageUpdatedAt, Long endAt, Long freeEndAt, String transcodeVersion, VideoProgramSharedLink sharedLink, ProgramPlayback playback, ProgramViewingPoint viewingPoint, NextProgramInfo nextProgramInfo, ProgramDownload download) {
    this(id, series, season, genre, info, providedInfo, episode, credit, mediaStatus, label, imageUpdatedAt, endAt, freeEndAt, transcodeVersion, sharedLink, playback, viewingPoint, nextProgramInfo, download, ByteString.EMPTY);
  }

  public VideoProgram(String id, VideoSeriesInfo series, VideoSeason season, VideoGenre genre, VideoProgramInfo info, VideoProgramProvidedInfo providedInfo, VideoProgramEpisode episode, VideoProgramCredit credit, VideoProgramMediaStatus mediaStatus, VideoProgramLabel label, Long imageUpdatedAt, Long endAt, Long freeEndAt, String transcodeVersion, VideoProgramSharedLink sharedLink, ProgramPlayback playback, ProgramViewingPoint viewingPoint, NextProgramInfo nextProgramInfo, ProgramDownload download, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.series = series;
    this.season = season;
    this.genre = genre;
    this.info = info;
    this.providedInfo = providedInfo;
    this.episode = episode;
    this.credit = credit;
    this.mediaStatus = mediaStatus;
    this.label = label;
    this.imageUpdatedAt = imageUpdatedAt;
    this.endAt = endAt;
    this.freeEndAt = freeEndAt;
    this.transcodeVersion = transcodeVersion;
    this.sharedLink = sharedLink;
    this.playback = playback;
    this.viewingPoint = viewingPoint;
    this.nextProgramInfo = nextProgramInfo;
    this.download = download;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.series = series;
    builder.season = season;
    builder.genre = genre;
    builder.info = info;
    builder.providedInfo = providedInfo;
    builder.episode = episode;
    builder.credit = credit;
    builder.mediaStatus = mediaStatus;
    builder.label = label;
    builder.imageUpdatedAt = imageUpdatedAt;
    builder.endAt = endAt;
    builder.freeEndAt = freeEndAt;
    builder.transcodeVersion = transcodeVersion;
    builder.sharedLink = sharedLink;
    builder.playback = playback;
    builder.viewingPoint = viewingPoint;
    builder.nextProgramInfo = nextProgramInfo;
    builder.download = download;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VideoProgram)) return false;
    VideoProgram o = (VideoProgram) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(series, o.series)
        && Internal.equals(season, o.season)
        && Internal.equals(genre, o.genre)
        && Internal.equals(info, o.info)
        && Internal.equals(providedInfo, o.providedInfo)
        && Internal.equals(episode, o.episode)
        && Internal.equals(credit, o.credit)
        && Internal.equals(mediaStatus, o.mediaStatus)
        && Internal.equals(label, o.label)
        && Internal.equals(imageUpdatedAt, o.imageUpdatedAt)
        && Internal.equals(endAt, o.endAt)
        && Internal.equals(freeEndAt, o.freeEndAt)
        && Internal.equals(transcodeVersion, o.transcodeVersion)
        && Internal.equals(sharedLink, o.sharedLink)
        && Internal.equals(playback, o.playback)
        && Internal.equals(viewingPoint, o.viewingPoint)
        && Internal.equals(nextProgramInfo, o.nextProgramInfo)
        && Internal.equals(download, o.download);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (series != null ? series.hashCode() : 0);
      result = result * 37 + (season != null ? season.hashCode() : 0);
      result = result * 37 + (genre != null ? genre.hashCode() : 0);
      result = result * 37 + (info != null ? info.hashCode() : 0);
      result = result * 37 + (providedInfo != null ? providedInfo.hashCode() : 0);
      result = result * 37 + (episode != null ? episode.hashCode() : 0);
      result = result * 37 + (credit != null ? credit.hashCode() : 0);
      result = result * 37 + (mediaStatus != null ? mediaStatus.hashCode() : 0);
      result = result * 37 + (label != null ? label.hashCode() : 0);
      result = result * 37 + (imageUpdatedAt != null ? imageUpdatedAt.hashCode() : 0);
      result = result * 37 + (endAt != null ? endAt.hashCode() : 0);
      result = result * 37 + (freeEndAt != null ? freeEndAt.hashCode() : 0);
      result = result * 37 + (transcodeVersion != null ? transcodeVersion.hashCode() : 0);
      result = result * 37 + (sharedLink != null ? sharedLink.hashCode() : 0);
      result = result * 37 + (playback != null ? playback.hashCode() : 0);
      result = result * 37 + (viewingPoint != null ? viewingPoint.hashCode() : 0);
      result = result * 37 + (nextProgramInfo != null ? nextProgramInfo.hashCode() : 0);
      result = result * 37 + (download != null ? download.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (series != null) builder.append(", series=").append(series);
    if (season != null) builder.append(", season=").append(season);
    if (genre != null) builder.append(", genre=").append(genre);
    if (info != null) builder.append(", info=").append(info);
    if (providedInfo != null) builder.append(", providedInfo=").append(providedInfo);
    if (episode != null) builder.append(", episode=").append(episode);
    if (credit != null) builder.append(", credit=").append(credit);
    if (mediaStatus != null) builder.append(", mediaStatus=").append(mediaStatus);
    if (label != null) builder.append(", label=").append(label);
    if (imageUpdatedAt != null) builder.append(", imageUpdatedAt=").append(imageUpdatedAt);
    if (endAt != null) builder.append(", endAt=").append(endAt);
    if (freeEndAt != null) builder.append(", freeEndAt=").append(freeEndAt);
    if (transcodeVersion != null) builder.append(", transcodeVersion=").append(transcodeVersion);
    if (sharedLink != null) builder.append(", sharedLink=").append(sharedLink);
    if (playback != null) builder.append(", playback=").append(playback);
    if (viewingPoint != null) builder.append(", viewingPoint=").append(viewingPoint);
    if (nextProgramInfo != null) builder.append(", nextProgramInfo=").append(nextProgramInfo);
    if (download != null) builder.append(", download=").append(download);
    return builder.replace(0, 2, "VideoProgram{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<VideoProgram, Builder> {
    public String id;

    public VideoSeriesInfo series;

    public VideoSeason season;

    public VideoGenre genre;

    public VideoProgramInfo info;

    public VideoProgramProvidedInfo providedInfo;

    public VideoProgramEpisode episode;

    public VideoProgramCredit credit;

    public VideoProgramMediaStatus mediaStatus;

    public VideoProgramLabel label;

    public Long imageUpdatedAt;

    public Long endAt;

    public Long freeEndAt;

    public String transcodeVersion;

    public VideoProgramSharedLink sharedLink;

    public ProgramPlayback playback;

    public ProgramViewingPoint viewingPoint;

    public NextProgramInfo nextProgramInfo;

    public ProgramDownload download;

    public Builder() {
    }

    /**
     * / 番組ID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / シリーズ
     */
    public Builder series(VideoSeriesInfo series) {
      this.series = series;
      return this;
    }

    /**
     * / シーズン
     */
    public Builder season(VideoSeason season) {
      this.season = season;
      return this;
    }

    /**
     * / ジャンル
     */
    public Builder genre(VideoGenre genre) {
      this.genre = genre;
      return this;
    }

    /**
     * / 番組情報
     */
    public Builder info(VideoProgramInfo info) {
      this.info = info;
      return this;
    }

    /**
     * / 納品情報
     */
    public Builder providedInfo(VideoProgramProvidedInfo providedInfo) {
      this.providedInfo = providedInfo;
      return this;
    }

    /**
     * / エピソード
     */
    public Builder episode(VideoProgramEpisode episode) {
      this.episode = episode;
      return this;
    }

    /**
     * / クレジット
     */
    public Builder credit(VideoProgramCredit credit) {
      this.credit = credit;
      return this;
    }

    /**
     * / メディアステータス
     */
    public Builder mediaStatus(VideoProgramMediaStatus mediaStatus) {
      this.mediaStatus = mediaStatus;
      return this;
    }

    /**
     * / ラベル
     */
    public Builder label(VideoProgramLabel label) {
      this.label = label;
      return this;
    }

    /**
     * / 画像更新UNIX時間
     */
    public Builder imageUpdatedAt(Long imageUpdatedAt) {
      this.imageUpdatedAt = imageUpdatedAt;
      return this;
    }

    /**
     * / 視聴期限UNIX時間
     */
    public Builder endAt(Long endAt) {
      this.endAt = endAt;
      return this;
    }

    /**
     * / 無料視聴期限UNIX時間
     */
    public Builder freeEndAt(Long freeEndAt) {
      this.freeEndAt = freeEndAt;
      return this;
    }

    /**
     * / トランスコードバージョン
     */
    public Builder transcodeVersion(String transcodeVersion) {
      this.transcodeVersion = transcodeVersion;
      return this;
    }

    /**
     * / 番組の共有リンク
     */
    public Builder sharedLink(VideoProgramSharedLink sharedLink) {
      this.sharedLink = sharedLink;
      return this;
    }

    /**
     * / 番組の再生情報
     */
    public Builder playback(ProgramPlayback playback) {
      this.playback = playback;
      return this;
    }

    /**
     * / 視聴ポイント
     */
    public Builder viewingPoint(ProgramViewingPoint viewingPoint) {
      this.viewingPoint = viewingPoint;
      return this;
    }

    /**
     * / 次のエピソード情報
     */
    public Builder nextProgramInfo(NextProgramInfo nextProgramInfo) {
      this.nextProgramInfo = nextProgramInfo;
      return this;
    }

    /**
     * / ダウンロード情報
     */
    public Builder download(ProgramDownload download) {
      this.download = download;
      return this;
    }

    @Override
    public VideoProgram build() {
      return new VideoProgram(id, series, season, genre, info, providedInfo, episode, credit, mediaStatus, label, imageUpdatedAt, endAt, freeEndAt, transcodeVersion, sharedLink, playback, viewingPoint, nextProgramInfo, download, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VideoProgram extends ProtoAdapter<VideoProgram> {
    ProtoAdapter_VideoProgram() {
      super(FieldEncoding.LENGTH_DELIMITED, VideoProgram.class);
    }

    @Override
    public int encodedSize(VideoProgram value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.series != null ? VideoSeriesInfo.ADAPTER.encodedSizeWithTag(2, value.series) : 0)
          + (value.season != null ? VideoSeason.ADAPTER.encodedSizeWithTag(3, value.season) : 0)
          + (value.genre != null ? VideoGenre.ADAPTER.encodedSizeWithTag(4, value.genre) : 0)
          + (value.info != null ? VideoProgramInfo.ADAPTER.encodedSizeWithTag(5, value.info) : 0)
          + (value.providedInfo != null ? VideoProgramProvidedInfo.ADAPTER.encodedSizeWithTag(6, value.providedInfo) : 0)
          + (value.episode != null ? VideoProgramEpisode.ADAPTER.encodedSizeWithTag(7, value.episode) : 0)
          + (value.credit != null ? VideoProgramCredit.ADAPTER.encodedSizeWithTag(8, value.credit) : 0)
          + (value.mediaStatus != null ? VideoProgramMediaStatus.ADAPTER.encodedSizeWithTag(9, value.mediaStatus) : 0)
          + (value.label != null ? VideoProgramLabel.ADAPTER.encodedSizeWithTag(10, value.label) : 0)
          + (value.imageUpdatedAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(11, value.imageUpdatedAt) : 0)
          + (value.endAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(12, value.endAt) : 0)
          + (value.freeEndAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(13, value.freeEndAt) : 0)
          + (value.transcodeVersion != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.transcodeVersion) : 0)
          + (value.sharedLink != null ? VideoProgramSharedLink.ADAPTER.encodedSizeWithTag(15, value.sharedLink) : 0)
          + (value.playback != null ? ProgramPlayback.ADAPTER.encodedSizeWithTag(16, value.playback) : 0)
          + (value.viewingPoint != null ? ProgramViewingPoint.ADAPTER.encodedSizeWithTag(17, value.viewingPoint) : 0)
          + (value.nextProgramInfo != null ? NextProgramInfo.ADAPTER.encodedSizeWithTag(18, value.nextProgramInfo) : 0)
          + (value.download != null ? ProgramDownload.ADAPTER.encodedSizeWithTag(19, value.download) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VideoProgram value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.series != null) VideoSeriesInfo.ADAPTER.encodeWithTag(writer, 2, value.series);
      if (value.season != null) VideoSeason.ADAPTER.encodeWithTag(writer, 3, value.season);
      if (value.genre != null) VideoGenre.ADAPTER.encodeWithTag(writer, 4, value.genre);
      if (value.info != null) VideoProgramInfo.ADAPTER.encodeWithTag(writer, 5, value.info);
      if (value.providedInfo != null) VideoProgramProvidedInfo.ADAPTER.encodeWithTag(writer, 6, value.providedInfo);
      if (value.episode != null) VideoProgramEpisode.ADAPTER.encodeWithTag(writer, 7, value.episode);
      if (value.credit != null) VideoProgramCredit.ADAPTER.encodeWithTag(writer, 8, value.credit);
      if (value.mediaStatus != null) VideoProgramMediaStatus.ADAPTER.encodeWithTag(writer, 9, value.mediaStatus);
      if (value.label != null) VideoProgramLabel.ADAPTER.encodeWithTag(writer, 10, value.label);
      if (value.imageUpdatedAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 11, value.imageUpdatedAt);
      if (value.endAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 12, value.endAt);
      if (value.freeEndAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 13, value.freeEndAt);
      if (value.transcodeVersion != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.transcodeVersion);
      if (value.sharedLink != null) VideoProgramSharedLink.ADAPTER.encodeWithTag(writer, 15, value.sharedLink);
      if (value.playback != null) ProgramPlayback.ADAPTER.encodeWithTag(writer, 16, value.playback);
      if (value.viewingPoint != null) ProgramViewingPoint.ADAPTER.encodeWithTag(writer, 17, value.viewingPoint);
      if (value.nextProgramInfo != null) NextProgramInfo.ADAPTER.encodeWithTag(writer, 18, value.nextProgramInfo);
      if (value.download != null) ProgramDownload.ADAPTER.encodeWithTag(writer, 19, value.download);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VideoProgram decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.series(VideoSeriesInfo.ADAPTER.decode(reader)); break;
          case 3: builder.season(VideoSeason.ADAPTER.decode(reader)); break;
          case 4: builder.genre(VideoGenre.ADAPTER.decode(reader)); break;
          case 5: builder.info(VideoProgramInfo.ADAPTER.decode(reader)); break;
          case 6: builder.providedInfo(VideoProgramProvidedInfo.ADAPTER.decode(reader)); break;
          case 7: builder.episode(VideoProgramEpisode.ADAPTER.decode(reader)); break;
          case 8: builder.credit(VideoProgramCredit.ADAPTER.decode(reader)); break;
          case 9: builder.mediaStatus(VideoProgramMediaStatus.ADAPTER.decode(reader)); break;
          case 10: builder.label(VideoProgramLabel.ADAPTER.decode(reader)); break;
          case 11: builder.imageUpdatedAt(ProtoAdapter.INT64.decode(reader)); break;
          case 12: builder.endAt(ProtoAdapter.INT64.decode(reader)); break;
          case 13: builder.freeEndAt(ProtoAdapter.INT64.decode(reader)); break;
          case 14: builder.transcodeVersion(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.sharedLink(VideoProgramSharedLink.ADAPTER.decode(reader)); break;
          case 16: builder.playback(ProgramPlayback.ADAPTER.decode(reader)); break;
          case 17: builder.viewingPoint(ProgramViewingPoint.ADAPTER.decode(reader)); break;
          case 18: builder.nextProgramInfo(NextProgramInfo.ADAPTER.decode(reader)); break;
          case 19: builder.download(ProgramDownload.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VideoProgram redact(VideoProgram value) {
      Builder builder = value.newBuilder();
      if (builder.series != null) builder.series = VideoSeriesInfo.ADAPTER.redact(builder.series);
      if (builder.season != null) builder.season = VideoSeason.ADAPTER.redact(builder.season);
      if (builder.genre != null) builder.genre = VideoGenre.ADAPTER.redact(builder.genre);
      if (builder.info != null) builder.info = VideoProgramInfo.ADAPTER.redact(builder.info);
      if (builder.providedInfo != null) builder.providedInfo = VideoProgramProvidedInfo.ADAPTER.redact(builder.providedInfo);
      if (builder.episode != null) builder.episode = VideoProgramEpisode.ADAPTER.redact(builder.episode);
      if (builder.credit != null) builder.credit = VideoProgramCredit.ADAPTER.redact(builder.credit);
      if (builder.mediaStatus != null) builder.mediaStatus = VideoProgramMediaStatus.ADAPTER.redact(builder.mediaStatus);
      if (builder.label != null) builder.label = VideoProgramLabel.ADAPTER.redact(builder.label);
      if (builder.sharedLink != null) builder.sharedLink = VideoProgramSharedLink.ADAPTER.redact(builder.sharedLink);
      if (builder.playback != null) builder.playback = ProgramPlayback.ADAPTER.redact(builder.playback);
      if (builder.viewingPoint != null) builder.viewingPoint = ProgramViewingPoint.ADAPTER.redact(builder.viewingPoint);
      if (builder.nextProgramInfo != null) builder.nextProgramInfo = NextProgramInfo.ADAPTER.redact(builder.nextProgramInfo);
      if (builder.download != null) builder.download = ProgramDownload.ADAPTER.redact(builder.download);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
