// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/broadcast_slots.proto at 10:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class BroadcastSlot extends Message<BroadcastSlot, BroadcastSlot.Builder> {
  public static final ProtoAdapter<BroadcastSlot> ADAPTER = new ProtoAdapter_BroadcastSlot();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_TITLE = "";

  public static final Long DEFAULT_STARTAT = 0L;

  public static final Long DEFAULT_ENDAT = 0L;

  public static final String DEFAULT_CHANNELID = "";

  public static final String DEFAULT_GROUPID = "";

  public static final Long DEFAULT_TIMESHIFTENDAT = 0L;

  public static final Long DEFAULT_TIMESHIFTFREEENDAT = 0L;

  public static final String DEFAULT_HIGHLIGHT = "";

  public static final String DEFAULT_DETAILHIGHLIGHT = "";

  public static final String DEFAULT_CONTENT = "";

  public static final ScheduleStatus DEFAULT_STATUS = ScheduleStatus.SCHEDULED;

  /**
   * / 番組枠ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / 放送枠タイトル
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * / 開始時刻
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long startAt;

  /**
   * / 終了時刻
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long endAt;

  /**
   * / 放送されるチャンネルID
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String channelId;

  /**
   * / 放送枠グループID
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String groupId;

  /**
   * / タイムシフト可能最終日時
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long timeshiftEndAt;

  /**
   * / タイムシフト無料可能最終日時
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long timeshiftFreeEndAt;

  /**
   * / フィードスーパー
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String highlight;

  /**
   * / 番組詳細みどころ
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String detailHighlight;

  /**
   * / 詳細情報
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  /**
   * / 生、初、終、一挙、新、注目 etc...
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> labels;

  /**
   * / 番組ステータス
   */
  @WireField(
      tag = 13,
      adapter = "tv.abema.protos.BroadcastSlot$ScheduleStatus#ADAPTER"
  )
  public final ScheduleStatus status;

  /**
   * / 拡張リンク
   */
  @WireField(
      tag = 14,
      adapter = "tv.abema.protos.BroadcastSlot$Link#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Link> links;

  /**
   * / シェア関連情報
   */
  @WireField(
      tag = 15,
      adapter = "tv.abema.protos.SocialShares#ADAPTER"
  )
  public final SocialShares shares;

  /**
   * / サムネイル
   */
  @WireField(
      tag = 16,
      adapter = "tv.abema.protos.BroadcastSlot$Thumbnails#ADAPTER"
  )
  public final Thumbnails thumbnails;

  /**
   * / クレジット
   */
  @WireField(
      tag = 17,
      adapter = "tv.abema.protos.BroadcastSlot$Credit#ADAPTER"
  )
  public final Credit credit;

  /**
   * / 視聴数やコメント数
   */
  @WireField(
      tag = 18,
      adapter = "tv.abema.protos.BroadcastSlotStats#ADAPTER"
  )
  public final BroadcastSlotStats stats;

  /**
   * / 外部コンテンツ情報
   */
  @WireField(
      tag = 19,
      adapter = "tv.abema.protos.BroadcastSlot$ExternalContent#ADAPTER"
  )
  public final ExternalContent externalContent;

  public BroadcastSlot(String id, String title, Long startAt, Long endAt, String channelId, String groupId, Long timeshiftEndAt, Long timeshiftFreeEndAt, String highlight, String detailHighlight, String content, List<String> labels, ScheduleStatus status, List<Link> links, SocialShares shares, Thumbnails thumbnails, Credit credit, BroadcastSlotStats stats, ExternalContent externalContent) {
    this(id, title, startAt, endAt, channelId, groupId, timeshiftEndAt, timeshiftFreeEndAt, highlight, detailHighlight, content, labels, status, links, shares, thumbnails, credit, stats, externalContent, ByteString.EMPTY);
  }

  public BroadcastSlot(String id, String title, Long startAt, Long endAt, String channelId, String groupId, Long timeshiftEndAt, Long timeshiftFreeEndAt, String highlight, String detailHighlight, String content, List<String> labels, ScheduleStatus status, List<Link> links, SocialShares shares, Thumbnails thumbnails, Credit credit, BroadcastSlotStats stats, ExternalContent externalContent, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.title = title;
    this.startAt = startAt;
    this.endAt = endAt;
    this.channelId = channelId;
    this.groupId = groupId;
    this.timeshiftEndAt = timeshiftEndAt;
    this.timeshiftFreeEndAt = timeshiftFreeEndAt;
    this.highlight = highlight;
    this.detailHighlight = detailHighlight;
    this.content = content;
    this.labels = Internal.immutableCopyOf("labels", labels);
    this.status = status;
    this.links = Internal.immutableCopyOf("links", links);
    this.shares = shares;
    this.thumbnails = thumbnails;
    this.credit = credit;
    this.stats = stats;
    this.externalContent = externalContent;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.title = title;
    builder.startAt = startAt;
    builder.endAt = endAt;
    builder.channelId = channelId;
    builder.groupId = groupId;
    builder.timeshiftEndAt = timeshiftEndAt;
    builder.timeshiftFreeEndAt = timeshiftFreeEndAt;
    builder.highlight = highlight;
    builder.detailHighlight = detailHighlight;
    builder.content = content;
    builder.labels = Internal.copyOf("labels", labels);
    builder.status = status;
    builder.links = Internal.copyOf("links", links);
    builder.shares = shares;
    builder.thumbnails = thumbnails;
    builder.credit = credit;
    builder.stats = stats;
    builder.externalContent = externalContent;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BroadcastSlot)) return false;
    BroadcastSlot o = (BroadcastSlot) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(title, o.title)
        && Internal.equals(startAt, o.startAt)
        && Internal.equals(endAt, o.endAt)
        && Internal.equals(channelId, o.channelId)
        && Internal.equals(groupId, o.groupId)
        && Internal.equals(timeshiftEndAt, o.timeshiftEndAt)
        && Internal.equals(timeshiftFreeEndAt, o.timeshiftFreeEndAt)
        && Internal.equals(highlight, o.highlight)
        && Internal.equals(detailHighlight, o.detailHighlight)
        && Internal.equals(content, o.content)
        && Internal.equals(labels, o.labels)
        && Internal.equals(status, o.status)
        && Internal.equals(links, o.links)
        && Internal.equals(shares, o.shares)
        && Internal.equals(thumbnails, o.thumbnails)
        && Internal.equals(credit, o.credit)
        && Internal.equals(stats, o.stats)
        && Internal.equals(externalContent, o.externalContent);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (startAt != null ? startAt.hashCode() : 0);
      result = result * 37 + (endAt != null ? endAt.hashCode() : 0);
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (groupId != null ? groupId.hashCode() : 0);
      result = result * 37 + (timeshiftEndAt != null ? timeshiftEndAt.hashCode() : 0);
      result = result * 37 + (timeshiftFreeEndAt != null ? timeshiftFreeEndAt.hashCode() : 0);
      result = result * 37 + (highlight != null ? highlight.hashCode() : 0);
      result = result * 37 + (detailHighlight != null ? detailHighlight.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (labels != null ? labels.hashCode() : 1);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (links != null ? links.hashCode() : 1);
      result = result * 37 + (shares != null ? shares.hashCode() : 0);
      result = result * 37 + (thumbnails != null ? thumbnails.hashCode() : 0);
      result = result * 37 + (credit != null ? credit.hashCode() : 0);
      result = result * 37 + (stats != null ? stats.hashCode() : 0);
      result = result * 37 + (externalContent != null ? externalContent.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (title != null) builder.append(", title=").append(title);
    if (startAt != null) builder.append(", startAt=").append(startAt);
    if (endAt != null) builder.append(", endAt=").append(endAt);
    if (channelId != null) builder.append(", channelId=").append(channelId);
    if (groupId != null) builder.append(", groupId=").append(groupId);
    if (timeshiftEndAt != null) builder.append(", timeshiftEndAt=").append(timeshiftEndAt);
    if (timeshiftFreeEndAt != null) builder.append(", timeshiftFreeEndAt=").append(timeshiftFreeEndAt);
    if (highlight != null) builder.append(", highlight=").append(highlight);
    if (detailHighlight != null) builder.append(", detailHighlight=").append(detailHighlight);
    if (content != null) builder.append(", content=").append(content);
    if (labels != null) builder.append(", labels=").append(labels);
    if (status != null) builder.append(", status=").append(status);
    if (links != null) builder.append(", links=").append(links);
    if (shares != null) builder.append(", shares=").append(shares);
    if (thumbnails != null) builder.append(", thumbnails=").append(thumbnails);
    if (credit != null) builder.append(", credit=").append(credit);
    if (stats != null) builder.append(", stats=").append(stats);
    if (externalContent != null) builder.append(", externalContent=").append(externalContent);
    return builder.replace(0, 2, "BroadcastSlot{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<BroadcastSlot, Builder> {
    public String id;

    public String title;

    public Long startAt;

    public Long endAt;

    public String channelId;

    public String groupId;

    public Long timeshiftEndAt;

    public Long timeshiftFreeEndAt;

    public String highlight;

    public String detailHighlight;

    public String content;

    public List<String> labels;

    public ScheduleStatus status;

    public List<Link> links;

    public SocialShares shares;

    public Thumbnails thumbnails;

    public Credit credit;

    public BroadcastSlotStats stats;

    public ExternalContent externalContent;

    public Builder() {
      labels = Internal.newMutableList();
      links = Internal.newMutableList();
    }

    /**
     * / 番組枠ID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / 放送枠タイトル
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * / 開始時刻
     */
    public Builder startAt(Long startAt) {
      this.startAt = startAt;
      return this;
    }

    /**
     * / 終了時刻
     */
    public Builder endAt(Long endAt) {
      this.endAt = endAt;
      return this;
    }

    /**
     * / 放送されるチャンネルID
     */
    public Builder channelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * / 放送枠グループID
     */
    public Builder groupId(String groupId) {
      this.groupId = groupId;
      return this;
    }

    /**
     * / タイムシフト可能最終日時
     */
    public Builder timeshiftEndAt(Long timeshiftEndAt) {
      this.timeshiftEndAt = timeshiftEndAt;
      return this;
    }

    /**
     * / タイムシフト無料可能最終日時
     */
    public Builder timeshiftFreeEndAt(Long timeshiftFreeEndAt) {
      this.timeshiftFreeEndAt = timeshiftFreeEndAt;
      return this;
    }

    /**
     * / フィードスーパー
     */
    public Builder highlight(String highlight) {
      this.highlight = highlight;
      return this;
    }

    /**
     * / 番組詳細みどころ
     */
    public Builder detailHighlight(String detailHighlight) {
      this.detailHighlight = detailHighlight;
      return this;
    }

    /**
     * / 詳細情報
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    /**
     * / 生、初、終、一挙、新、注目 etc...
     */
    public Builder labels(List<String> labels) {
      Internal.checkElementsNotNull(labels);
      this.labels = labels;
      return this;
    }

    /**
     * / 番組ステータス
     */
    public Builder status(ScheduleStatus status) {
      this.status = status;
      return this;
    }

    /**
     * / 拡張リンク
     */
    public Builder links(List<Link> links) {
      Internal.checkElementsNotNull(links);
      this.links = links;
      return this;
    }

    /**
     * / シェア関連情報
     */
    public Builder shares(SocialShares shares) {
      this.shares = shares;
      return this;
    }

    /**
     * / サムネイル
     */
    public Builder thumbnails(Thumbnails thumbnails) {
      this.thumbnails = thumbnails;
      return this;
    }

    /**
     * / クレジット
     */
    public Builder credit(Credit credit) {
      this.credit = credit;
      return this;
    }

    /**
     * / 視聴数やコメント数
     */
    public Builder stats(BroadcastSlotStats stats) {
      this.stats = stats;
      return this;
    }

    /**
     * / 外部コンテンツ情報
     */
    public Builder externalContent(ExternalContent externalContent) {
      this.externalContent = externalContent;
      return this;
    }

    @Override
    public BroadcastSlot build() {
      return new BroadcastSlot(id, title, startAt, endAt, channelId, groupId, timeshiftEndAt, timeshiftFreeEndAt, highlight, detailHighlight, content, labels, status, links, shares, thumbnails, credit, stats, externalContent, buildUnknownFields());
    }
  }

  public enum ScheduleStatus implements WireEnum {
    /**
     * / 放送予定
     */
    SCHEDULED(0),

    /**
     * / 休止
     */
    PAUSED(1);

    public static final ProtoAdapter<ScheduleStatus> ADAPTER = ProtoAdapter.newEnumAdapter(ScheduleStatus.class);

    private final int value;

    ScheduleStatus(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static ScheduleStatus fromValue(int value) {
      switch (value) {
        case 0: return SCHEDULED;
        case 1: return PAUSED;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public static final class Link extends Message<Link, Link.Builder> {
    public static final ProtoAdapter<Link> ADAPTER = new ProtoAdapter_Link();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_VALUE = "";

    public static final Type DEFAULT_TYPE = Type.NONE;

    public static final String DEFAULT_TITLE = "";

    /**
     * / リンク
     */
    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String value;

    /**
     * / リンク種別
     */
    @WireField(
        tag = 2,
        adapter = "tv.abema.protos.BroadcastSlot$Link$Type#ADAPTER"
    )
    public final Type type;

    /**
     * / タイトル
     */
    @WireField(
        tag = 3,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String title;

    public Link(String value, Type type, String title) {
      this(value, type, title, ByteString.EMPTY);
    }

    public Link(String value, Type type, String title, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.value = value;
      this.type = type;
      this.title = title;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.value = value;
      builder.type = type;
      builder.title = title;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Link)) return false;
      Link o = (Link) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(value, o.value)
          && Internal.equals(type, o.type)
          && Internal.equals(title, o.title);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (value != null ? value.hashCode() : 0);
        result = result * 37 + (type != null ? type.hashCode() : 0);
        result = result * 37 + (title != null ? title.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (value != null) builder.append(", value=").append(value);
      if (type != null) builder.append(", type=").append(type);
      if (title != null) builder.append(", title=").append(title);
      return builder.replace(0, 2, "Link{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Link, Builder> {
      public String value;

      public Type type;

      public String title;

      public Builder() {
      }

      /**
       * / リンク
       */
      public Builder value(String value) {
        this.value = value;
        return this;
      }

      /**
       * / リンク種別
       */
      public Builder type(Type type) {
        this.type = type;
        return this;
      }

      /**
       * / タイトル
       */
      public Builder title(String title) {
        this.title = title;
        return this;
      }

      @Override
      public Link build() {
        return new Link(value, type, title, buildUnknownFields());
      }
    }

    public enum Type implements WireEnum {
      /**
       * / 未定義
       */
      NONE(0),

      /**
       * / メールアドレス
       */
      MAIL(1),

      /**
       * / URL
       */
      URL(2);

      public static final ProtoAdapter<Type> ADAPTER = ProtoAdapter.newEnumAdapter(Type.class);

      private final int value;

      Type(int value) {
        this.value = value;
      }

      /**
       * Return the constant for {@code value} or null.
       */
      public static Type fromValue(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return MAIL;
          case 2: return URL;
          default: return null;
        }
      }

      @Override
      public int getValue() {
        return value;
      }
    }

    private static final class ProtoAdapter_Link extends ProtoAdapter<Link> {
      ProtoAdapter_Link() {
        super(FieldEncoding.LENGTH_DELIMITED, Link.class);
      }

      @Override
      public int encodedSize(Link value) {
        return (value.value != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.value) : 0)
            + (value.type != null ? Type.ADAPTER.encodedSizeWithTag(2, value.type) : 0)
            + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.title) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Link value) throws IOException {
        if (value.value != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.value);
        if (value.type != null) Type.ADAPTER.encodeWithTag(writer, 2, value.type);
        if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.title);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Link decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.value(ProtoAdapter.STRING.decode(reader)); break;
            case 2: {
              try {
                builder.type(Type.ADAPTER.decode(reader));
              } catch (ProtoAdapter.EnumConstantNotFoundException e) {
                builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
              }
              break;
            }
            case 3: builder.title(ProtoAdapter.STRING.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Link redact(Link value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public static final class Thumbnails extends Message<Thumbnails, Thumbnails.Builder> {
    public static final ProtoAdapter<Thumbnails> ADAPTER = new ProtoAdapter_Thumbnails();

    private static final long serialVersionUID = 0L;

    /**
     * / 代表画像
     */
    @WireField(
        tag = 1,
        adapter = "tv.abema.protos.BroadcastSlot$Thumbnails$Thumbnail#ADAPTER"
    )
    public final Thumbnail default_;

    /**
     * / シーン画像
     */
    @WireField(
        tag = 2,
        adapter = "tv.abema.protos.BroadcastSlot$Thumbnails$Thumbnail#ADAPTER",
        label = WireField.Label.REPEATED
    )
    public final List<Thumbnail> scenes;

    public Thumbnails(Thumbnail default_, List<Thumbnail> scenes) {
      this(default_, scenes, ByteString.EMPTY);
    }

    public Thumbnails(Thumbnail default_, List<Thumbnail> scenes, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.default_ = default_;
      this.scenes = Internal.immutableCopyOf("scenes", scenes);
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.default_ = default_;
      builder.scenes = Internal.copyOf("scenes", scenes);
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Thumbnails)) return false;
      Thumbnails o = (Thumbnails) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(default_, o.default_)
          && Internal.equals(scenes, o.scenes);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (default_ != null ? default_.hashCode() : 0);
        result = result * 37 + (scenes != null ? scenes.hashCode() : 1);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (default_ != null) builder.append(", default=").append(default_);
      if (scenes != null) builder.append(", scenes=").append(scenes);
      return builder.replace(0, 2, "Thumbnails{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Thumbnails, Builder> {
      public Thumbnail default_;

      public List<Thumbnail> scenes;

      public Builder() {
        scenes = Internal.newMutableList();
      }

      /**
       * / 代表画像
       */
      public Builder default_(Thumbnail default_) {
        this.default_ = default_;
        return this;
      }

      /**
       * / シーン画像
       */
      public Builder scenes(List<Thumbnail> scenes) {
        Internal.checkElementsNotNull(scenes);
        this.scenes = scenes;
        return this;
      }

      @Override
      public Thumbnails build() {
        return new Thumbnails(default_, scenes, buildUnknownFields());
      }
    }

    public static final class Thumbnail extends Message<Thumbnail, Thumbnail.Builder> {
      public static final ProtoAdapter<Thumbnail> ADAPTER = new ProtoAdapter_Thumbnail();

      private static final long serialVersionUID = 0L;

      public static final String DEFAULT_VERSION = "";

      public static final String DEFAULT_ID = "";

      public static final String DEFAULT_NAME = "";

      /**
       * /  バージョン
       */
      @WireField(
          tag = 1,
          adapter = "com.squareup.wire.ProtoAdapter#STRING"
      )
      public final String version;

      /**
       * / id
       */
      @WireField(
          tag = 2,
          adapter = "com.squareup.wire.ProtoAdapter#STRING"
      )
      public final String id;

      /**
       * / ファイル名
       */
      @WireField(
          tag = 3,
          adapter = "com.squareup.wire.ProtoAdapter#STRING"
      )
      public final String name;

      public Thumbnail(String version, String id, String name) {
        this(version, id, name, ByteString.EMPTY);
      }

      public Thumbnail(String version, String id, String name, ByteString unknownFields) {
        super(ADAPTER, unknownFields);
        this.version = version;
        this.id = id;
        this.name = name;
      }

      @Override
      public Builder newBuilder() {
        Builder builder = new Builder();
        builder.version = version;
        builder.id = id;
        builder.name = name;
        builder.addUnknownFields(unknownFields());
        return builder;
      }

      @Override
      public boolean equals(Object other) {
        if (other == this) return true;
        if (!(other instanceof Thumbnail)) return false;
        Thumbnail o = (Thumbnail) other;
        return Internal.equals(unknownFields(), o.unknownFields())
            && Internal.equals(version, o.version)
            && Internal.equals(id, o.id)
            && Internal.equals(name, o.name);
      }

      @Override
      public int hashCode() {
        int result = super.hashCode;
        if (result == 0) {
          result = unknownFields().hashCode();
          result = result * 37 + (version != null ? version.hashCode() : 0);
          result = result * 37 + (id != null ? id.hashCode() : 0);
          result = result * 37 + (name != null ? name.hashCode() : 0);
          super.hashCode = result;
        }
        return result;
      }

      @Override
      public String toString() {
        StringBuilder builder = new StringBuilder();
        if (version != null) builder.append(", version=").append(version);
        if (id != null) builder.append(", id=").append(id);
        if (name != null) builder.append(", name=").append(name);
        return builder.replace(0, 2, "Thumbnail{").append('}').toString();
      }

      public static final class Builder extends Message.Builder<Thumbnail, Builder> {
        public String version;

        public String id;

        public String name;

        public Builder() {
        }

        /**
         * /  バージョン
         */
        public Builder version(String version) {
          this.version = version;
          return this;
        }

        /**
         * / id
         */
        public Builder id(String id) {
          this.id = id;
          return this;
        }

        /**
         * / ファイル名
         */
        public Builder name(String name) {
          this.name = name;
          return this;
        }

        @Override
        public Thumbnail build() {
          return new Thumbnail(version, id, name, buildUnknownFields());
        }
      }

      private static final class ProtoAdapter_Thumbnail extends ProtoAdapter<Thumbnail> {
        ProtoAdapter_Thumbnail() {
          super(FieldEncoding.LENGTH_DELIMITED, Thumbnail.class);
        }

        @Override
        public int encodedSize(Thumbnail value) {
          return (value.version != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.version) : 0)
              + (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.id) : 0)
              + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.name) : 0)
              + value.unknownFields().size();
        }

        @Override
        public void encode(ProtoWriter writer, Thumbnail value) throws IOException {
          if (value.version != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.version);
          if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.id);
          if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.name);
          writer.writeBytes(value.unknownFields());
        }

        @Override
        public Thumbnail decode(ProtoReader reader) throws IOException {
          Builder builder = new Builder();
          long token = reader.beginMessage();
          for (int tag; (tag = reader.nextTag()) != -1;) {
            switch (tag) {
              case 1: builder.version(ProtoAdapter.STRING.decode(reader)); break;
              case 2: builder.id(ProtoAdapter.STRING.decode(reader)); break;
              case 3: builder.name(ProtoAdapter.STRING.decode(reader)); break;
              default: {
                FieldEncoding fieldEncoding = reader.peekFieldEncoding();
                Object value = fieldEncoding.rawProtoAdapter().decode(reader);
                builder.addUnknownField(tag, fieldEncoding, value);
              }
            }
          }
          reader.endMessage(token);
          return builder.build();
        }

        @Override
        public Thumbnail redact(Thumbnail value) {
          Builder builder = value.newBuilder();
          builder.clearUnknownFields();
          return builder.build();
        }
      }
    }

    private static final class ProtoAdapter_Thumbnails extends ProtoAdapter<Thumbnails> {
      ProtoAdapter_Thumbnails() {
        super(FieldEncoding.LENGTH_DELIMITED, Thumbnails.class);
      }

      @Override
      public int encodedSize(Thumbnails value) {
        return (value.default_ != null ? Thumbnail.ADAPTER.encodedSizeWithTag(1, value.default_) : 0)
            + Thumbnail.ADAPTER.asRepeated().encodedSizeWithTag(2, value.scenes)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Thumbnails value) throws IOException {
        if (value.default_ != null) Thumbnail.ADAPTER.encodeWithTag(writer, 1, value.default_);
        if (value.scenes != null) Thumbnail.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.scenes);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Thumbnails decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.default_(Thumbnail.ADAPTER.decode(reader)); break;
            case 2: builder.scenes.add(Thumbnail.ADAPTER.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Thumbnails redact(Thumbnails value) {
        Builder builder = value.newBuilder();
        if (builder.default_ != null) builder.default_ = Thumbnail.ADAPTER.redact(builder.default_);
        Internal.redactElements(builder.scenes, Thumbnail.ADAPTER);
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public static final class Credit extends Message<Credit, Credit.Builder> {
    public static final ProtoAdapter<Credit> ADAPTER = new ProtoAdapter_Credit();

    private static final long serialVersionUID = 0L;

    /**
     * / キャスト名
     */
    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.REPEATED
    )
    public final List<String> casts;

    /**
     * / スタッフ名
     */
    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.REPEATED
    )
    public final List<String> crews;

    /**
     * / コピーライト
     */
    @WireField(
        tag = 4,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.REPEATED
    )
    public final List<String> copyrights;

    public Credit(List<String> casts, List<String> crews, List<String> copyrights) {
      this(casts, crews, copyrights, ByteString.EMPTY);
    }

    public Credit(List<String> casts, List<String> crews, List<String> copyrights, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.casts = Internal.immutableCopyOf("casts", casts);
      this.crews = Internal.immutableCopyOf("crews", crews);
      this.copyrights = Internal.immutableCopyOf("copyrights", copyrights);
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.casts = Internal.copyOf("casts", casts);
      builder.crews = Internal.copyOf("crews", crews);
      builder.copyrights = Internal.copyOf("copyrights", copyrights);
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Credit)) return false;
      Credit o = (Credit) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(casts, o.casts)
          && Internal.equals(crews, o.crews)
          && Internal.equals(copyrights, o.copyrights);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (casts != null ? casts.hashCode() : 1);
        result = result * 37 + (crews != null ? crews.hashCode() : 1);
        result = result * 37 + (copyrights != null ? copyrights.hashCode() : 1);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (casts != null) builder.append(", casts=").append(casts);
      if (crews != null) builder.append(", crews=").append(crews);
      if (copyrights != null) builder.append(", copyrights=").append(copyrights);
      return builder.replace(0, 2, "Credit{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Credit, Builder> {
      public List<String> casts;

      public List<String> crews;

      public List<String> copyrights;

      public Builder() {
        casts = Internal.newMutableList();
        crews = Internal.newMutableList();
        copyrights = Internal.newMutableList();
      }

      /**
       * / キャスト名
       */
      public Builder casts(List<String> casts) {
        Internal.checkElementsNotNull(casts);
        this.casts = casts;
        return this;
      }

      /**
       * / スタッフ名
       */
      public Builder crews(List<String> crews) {
        Internal.checkElementsNotNull(crews);
        this.crews = crews;
        return this;
      }

      /**
       * / コピーライト
       */
      public Builder copyrights(List<String> copyrights) {
        Internal.checkElementsNotNull(copyrights);
        this.copyrights = copyrights;
        return this;
      }

      @Override
      public Credit build() {
        return new Credit(casts, crews, copyrights, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_Credit extends ProtoAdapter<Credit> {
      ProtoAdapter_Credit() {
        super(FieldEncoding.LENGTH_DELIMITED, Credit.class);
      }

      @Override
      public int encodedSize(Credit value) {
        return ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(1, value.casts)
            + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(2, value.crews)
            + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.copyrights)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Credit value) throws IOException {
        if (value.casts != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 1, value.casts);
        if (value.crews != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 2, value.crews);
        if (value.copyrights != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.copyrights);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Credit decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.casts.add(ProtoAdapter.STRING.decode(reader)); break;
            case 2: builder.crews.add(ProtoAdapter.STRING.decode(reader)); break;
            case 4: builder.copyrights.add(ProtoAdapter.STRING.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Credit redact(Credit value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  public static final class ExternalContent extends Message<ExternalContent, ExternalContent.Builder> {
    public static final ProtoAdapter<ExternalContent> ADAPTER = new ProtoAdapter_ExternalContent();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_LINKTEXT = "";

    public static final String DEFAULT_LINK = "";

    /**
     * / 外部コンテンツリンクテキスト
     */
    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String linkText;

    /**
     * / 外部コンテンツリンク
     */
    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String link;

    public ExternalContent(String linkText, String link) {
      this(linkText, link, ByteString.EMPTY);
    }

    public ExternalContent(String linkText, String link, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.linkText = linkText;
      this.link = link;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.linkText = linkText;
      builder.link = link;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof ExternalContent)) return false;
      ExternalContent o = (ExternalContent) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(linkText, o.linkText)
          && Internal.equals(link, o.link);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (linkText != null ? linkText.hashCode() : 0);
        result = result * 37 + (link != null ? link.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (linkText != null) builder.append(", linkText=").append(linkText);
      if (link != null) builder.append(", link=").append(link);
      return builder.replace(0, 2, "ExternalContent{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<ExternalContent, Builder> {
      public String linkText;

      public String link;

      public Builder() {
      }

      /**
       * / 外部コンテンツリンクテキスト
       */
      public Builder linkText(String linkText) {
        this.linkText = linkText;
        return this;
      }

      /**
       * / 外部コンテンツリンク
       */
      public Builder link(String link) {
        this.link = link;
        return this;
      }

      @Override
      public ExternalContent build() {
        return new ExternalContent(linkText, link, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_ExternalContent extends ProtoAdapter<ExternalContent> {
      ProtoAdapter_ExternalContent() {
        super(FieldEncoding.LENGTH_DELIMITED, ExternalContent.class);
      }

      @Override
      public int encodedSize(ExternalContent value) {
        return (value.linkText != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.linkText) : 0)
            + (value.link != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.link) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, ExternalContent value) throws IOException {
        if (value.linkText != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.linkText);
        if (value.link != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.link);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public ExternalContent decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.linkText(ProtoAdapter.STRING.decode(reader)); break;
            case 2: builder.link(ProtoAdapter.STRING.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public ExternalContent redact(ExternalContent value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  private static final class ProtoAdapter_BroadcastSlot extends ProtoAdapter<BroadcastSlot> {
    ProtoAdapter_BroadcastSlot() {
      super(FieldEncoding.LENGTH_DELIMITED, BroadcastSlot.class);
    }

    @Override
    public int encodedSize(BroadcastSlot value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.title) : 0)
          + (value.startAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.startAt) : 0)
          + (value.endAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.endAt) : 0)
          + (value.channelId != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.channelId) : 0)
          + (value.groupId != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.groupId) : 0)
          + (value.timeshiftEndAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(7, value.timeshiftEndAt) : 0)
          + (value.timeshiftFreeEndAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(8, value.timeshiftFreeEndAt) : 0)
          + (value.highlight != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.highlight) : 0)
          + (value.detailHighlight != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.detailHighlight) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.content) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(12, value.labels)
          + (value.status != null ? ScheduleStatus.ADAPTER.encodedSizeWithTag(13, value.status) : 0)
          + Link.ADAPTER.asRepeated().encodedSizeWithTag(14, value.links)
          + (value.shares != null ? SocialShares.ADAPTER.encodedSizeWithTag(15, value.shares) : 0)
          + (value.thumbnails != null ? Thumbnails.ADAPTER.encodedSizeWithTag(16, value.thumbnails) : 0)
          + (value.credit != null ? Credit.ADAPTER.encodedSizeWithTag(17, value.credit) : 0)
          + (value.stats != null ? BroadcastSlotStats.ADAPTER.encodedSizeWithTag(18, value.stats) : 0)
          + (value.externalContent != null ? ExternalContent.ADAPTER.encodedSizeWithTag(19, value.externalContent) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BroadcastSlot value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.title);
      if (value.startAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.startAt);
      if (value.endAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.endAt);
      if (value.channelId != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.channelId);
      if (value.groupId != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.groupId);
      if (value.timeshiftEndAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.timeshiftEndAt);
      if (value.timeshiftFreeEndAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 8, value.timeshiftFreeEndAt);
      if (value.highlight != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.highlight);
      if (value.detailHighlight != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.detailHighlight);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.content);
      if (value.labels != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 12, value.labels);
      if (value.status != null) ScheduleStatus.ADAPTER.encodeWithTag(writer, 13, value.status);
      if (value.links != null) Link.ADAPTER.asRepeated().encodeWithTag(writer, 14, value.links);
      if (value.shares != null) SocialShares.ADAPTER.encodeWithTag(writer, 15, value.shares);
      if (value.thumbnails != null) Thumbnails.ADAPTER.encodeWithTag(writer, 16, value.thumbnails);
      if (value.credit != null) Credit.ADAPTER.encodeWithTag(writer, 17, value.credit);
      if (value.stats != null) BroadcastSlotStats.ADAPTER.encodeWithTag(writer, 18, value.stats);
      if (value.externalContent != null) ExternalContent.ADAPTER.encodeWithTag(writer, 19, value.externalContent);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BroadcastSlot decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.startAt(ProtoAdapter.INT64.decode(reader)); break;
          case 4: builder.endAt(ProtoAdapter.INT64.decode(reader)); break;
          case 5: builder.channelId(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.groupId(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.timeshiftEndAt(ProtoAdapter.INT64.decode(reader)); break;
          case 8: builder.timeshiftFreeEndAt(ProtoAdapter.INT64.decode(reader)); break;
          case 9: builder.highlight(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.detailHighlight(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.labels.add(ProtoAdapter.STRING.decode(reader)); break;
          case 13: {
            try {
              builder.status(ScheduleStatus.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 14: builder.links.add(Link.ADAPTER.decode(reader)); break;
          case 15: builder.shares(SocialShares.ADAPTER.decode(reader)); break;
          case 16: builder.thumbnails(Thumbnails.ADAPTER.decode(reader)); break;
          case 17: builder.credit(Credit.ADAPTER.decode(reader)); break;
          case 18: builder.stats(BroadcastSlotStats.ADAPTER.decode(reader)); break;
          case 19: builder.externalContent(ExternalContent.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BroadcastSlot redact(BroadcastSlot value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.links, Link.ADAPTER);
      if (builder.shares != null) builder.shares = SocialShares.ADAPTER.redact(builder.shares);
      if (builder.thumbnails != null) builder.thumbnails = Thumbnails.ADAPTER.redact(builder.thumbnails);
      if (builder.credit != null) builder.credit = Credit.ADAPTER.redact(builder.credit);
      if (builder.stats != null) builder.stats = BroadcastSlotStats.ADAPTER.redact(builder.stats);
      if (builder.externalContent != null) builder.externalContent = ExternalContent.ADAPTER.redact(builder.externalContent);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
