// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/user.proto at 180:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / メールアドレス確認メール送信 request
 */
public final class SendEmailConfirmationRequest extends Message<SendEmailConfirmationRequest, SendEmailConfirmationRequest.Builder> {
  public static final ProtoAdapter<SendEmailConfirmationRequest> ADAPTER = new ProtoAdapter_SendEmailConfirmationRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_EMAIL = "";

  public static final Purpose DEFAULT_PURPOSE = Purpose.UNKNOWN;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String email;

  /**
   * / 目的
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.SendEmailConfirmationRequest$Purpose#ADAPTER"
  )
  public final Purpose purpose;

  public SendEmailConfirmationRequest(String email, Purpose purpose) {
    this(email, purpose, ByteString.EMPTY);
  }

  public SendEmailConfirmationRequest(String email, Purpose purpose, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.email = email;
    this.purpose = purpose;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.email = email;
    builder.purpose = purpose;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SendEmailConfirmationRequest)) return false;
    SendEmailConfirmationRequest o = (SendEmailConfirmationRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(email, o.email)
        && Internal.equals(purpose, o.purpose);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (email != null ? email.hashCode() : 0);
      result = result * 37 + (purpose != null ? purpose.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (email != null) builder.append(", email=").append(email);
    if (purpose != null) builder.append(", purpose=").append(purpose);
    return builder.replace(0, 2, "SendEmailConfirmationRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SendEmailConfirmationRequest, Builder> {
    public String email;

    public Purpose purpose;

    public Builder() {
    }

    public Builder email(String email) {
      this.email = email;
      return this;
    }

    /**
     * / 目的
     */
    public Builder purpose(Purpose purpose) {
      this.purpose = purpose;
      return this;
    }

    @Override
    public SendEmailConfirmationRequest build() {
      return new SendEmailConfirmationRequest(email, purpose, buildUnknownFields());
    }
  }

  public enum Purpose implements WireEnum {
    /**
     * / 目的
     * / 不明
     */
    UNKNOWN(0),

    /**
     * / 新規登録
     */
    REGISTER(1),

    /**
     * / 更新
     */
    UPDATE(2),

    /**
     * / 移管
     */
    TRANSFER(3);

    public static final ProtoAdapter<Purpose> ADAPTER = ProtoAdapter.newEnumAdapter(Purpose.class);

    private final int value;

    Purpose(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Purpose fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return REGISTER;
        case 2: return UPDATE;
        case 3: return TRANSFER;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_SendEmailConfirmationRequest extends ProtoAdapter<SendEmailConfirmationRequest> {
    ProtoAdapter_SendEmailConfirmationRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, SendEmailConfirmationRequest.class);
    }

    @Override
    public int encodedSize(SendEmailConfirmationRequest value) {
      return (value.email != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.email) : 0)
          + (value.purpose != null ? Purpose.ADAPTER.encodedSizeWithTag(2, value.purpose) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SendEmailConfirmationRequest value) throws IOException {
      if (value.email != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.email);
      if (value.purpose != null) Purpose.ADAPTER.encodeWithTag(writer, 2, value.purpose);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SendEmailConfirmationRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.email(ProtoAdapter.STRING.decode(reader)); break;
          case 2: {
            try {
              builder.purpose(Purpose.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SendEmailConfirmationRequest redact(SendEmailConfirmationRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
