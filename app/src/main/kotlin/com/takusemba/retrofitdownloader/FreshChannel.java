// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/fresh.proto at 55:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / Freshチャネル情報
 */
public final class FreshChannel extends Message<FreshChannel, FreshChannel.Builder> {
  public static final ProtoAdapter<FreshChannel> ADAPTER = new ProtoAdapter_FreshChannel();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_DESCRIPTION = "";

  public static final String DEFAULT_CODE = "";

  public static final String DEFAULT_COVERURL = "";

  public static final String DEFAULT_CREATEDAT = "";

  public static final String DEFAULT_FACEBOOKSITEURL = "";

  public static final Integer DEFAULT_FOLLOWERCOUNT = 0;

  public static final String DEFAULT_IMAGEURL = "";

  public static final Boolean DEFAULT_ISFOLLOWING = false;

  public static final Boolean DEFAULT_ISPUBLISHED = false;

  public static final String DEFAULT_LINEATSITEURL = "";

  public static final String DEFAULT_PERMALINK = "";

  public static final String DEFAULT_SITEURL = "";

  public static final String DEFAULT_TWITTERSITEURL = "";

  public static final String DEFAULT_UPDATEDAT = "";

  /**
   * / ユーザーID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / チャネル名
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * / チャネル概要
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String description;

  /**
   * / チャネルコード
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String code;

  /**
   * / カバー画像URL
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String coverUrl;

  /**
   * / 作成日時
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createdAt;

  /**
   * / FacebookサイトURL
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String facebookSiteUrl;

  /**
   * / フォロワー数
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer followerCount;

  /**
   * / 画像URL
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String imageUrl;

  /**
   * / フォロー中フラグ
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isFollowing;

  /**
   * / 公開済みフラグ
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isPublished;

  /**
   * / LineサイトURL
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String lineAtSiteUrl;

  /**
   * / リンク先URL
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String permalink;

  /**
   * / サイトURL
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String siteUrl;

  /**
   * / TwitterサイトURL
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String twitterSiteUrl;

  /**
   * / 更新日時
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updatedAt;

  /**
   * / チャネルオーナー
   */
  @WireField(
      tag = 50,
      adapter = "tv.abema.protos.FreshUser#ADAPTER"
  )
  public final FreshUser user;

  public FreshChannel(String id, String title, String description, String code, String coverUrl, String createdAt, String facebookSiteUrl, Integer followerCount, String imageUrl, Boolean isFollowing, Boolean isPublished, String lineAtSiteUrl, String permalink, String siteUrl, String twitterSiteUrl, String updatedAt, FreshUser user) {
    this(id, title, description, code, coverUrl, createdAt, facebookSiteUrl, followerCount, imageUrl, isFollowing, isPublished, lineAtSiteUrl, permalink, siteUrl, twitterSiteUrl, updatedAt, user, ByteString.EMPTY);
  }

  public FreshChannel(String id, String title, String description, String code, String coverUrl, String createdAt, String facebookSiteUrl, Integer followerCount, String imageUrl, Boolean isFollowing, Boolean isPublished, String lineAtSiteUrl, String permalink, String siteUrl, String twitterSiteUrl, String updatedAt, FreshUser user, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.title = title;
    this.description = description;
    this.code = code;
    this.coverUrl = coverUrl;
    this.createdAt = createdAt;
    this.facebookSiteUrl = facebookSiteUrl;
    this.followerCount = followerCount;
    this.imageUrl = imageUrl;
    this.isFollowing = isFollowing;
    this.isPublished = isPublished;
    this.lineAtSiteUrl = lineAtSiteUrl;
    this.permalink = permalink;
    this.siteUrl = siteUrl;
    this.twitterSiteUrl = twitterSiteUrl;
    this.updatedAt = updatedAt;
    this.user = user;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.title = title;
    builder.description = description;
    builder.code = code;
    builder.coverUrl = coverUrl;
    builder.createdAt = createdAt;
    builder.facebookSiteUrl = facebookSiteUrl;
    builder.followerCount = followerCount;
    builder.imageUrl = imageUrl;
    builder.isFollowing = isFollowing;
    builder.isPublished = isPublished;
    builder.lineAtSiteUrl = lineAtSiteUrl;
    builder.permalink = permalink;
    builder.siteUrl = siteUrl;
    builder.twitterSiteUrl = twitterSiteUrl;
    builder.updatedAt = updatedAt;
    builder.user = user;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FreshChannel)) return false;
    FreshChannel o = (FreshChannel) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(title, o.title)
        && Internal.equals(description, o.description)
        && Internal.equals(code, o.code)
        && Internal.equals(coverUrl, o.coverUrl)
        && Internal.equals(createdAt, o.createdAt)
        && Internal.equals(facebookSiteUrl, o.facebookSiteUrl)
        && Internal.equals(followerCount, o.followerCount)
        && Internal.equals(imageUrl, o.imageUrl)
        && Internal.equals(isFollowing, o.isFollowing)
        && Internal.equals(isPublished, o.isPublished)
        && Internal.equals(lineAtSiteUrl, o.lineAtSiteUrl)
        && Internal.equals(permalink, o.permalink)
        && Internal.equals(siteUrl, o.siteUrl)
        && Internal.equals(twitterSiteUrl, o.twitterSiteUrl)
        && Internal.equals(updatedAt, o.updatedAt)
        && Internal.equals(user, o.user);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (description != null ? description.hashCode() : 0);
      result = result * 37 + (code != null ? code.hashCode() : 0);
      result = result * 37 + (coverUrl != null ? coverUrl.hashCode() : 0);
      result = result * 37 + (createdAt != null ? createdAt.hashCode() : 0);
      result = result * 37 + (facebookSiteUrl != null ? facebookSiteUrl.hashCode() : 0);
      result = result * 37 + (followerCount != null ? followerCount.hashCode() : 0);
      result = result * 37 + (imageUrl != null ? imageUrl.hashCode() : 0);
      result = result * 37 + (isFollowing != null ? isFollowing.hashCode() : 0);
      result = result * 37 + (isPublished != null ? isPublished.hashCode() : 0);
      result = result * 37 + (lineAtSiteUrl != null ? lineAtSiteUrl.hashCode() : 0);
      result = result * 37 + (permalink != null ? permalink.hashCode() : 0);
      result = result * 37 + (siteUrl != null ? siteUrl.hashCode() : 0);
      result = result * 37 + (twitterSiteUrl != null ? twitterSiteUrl.hashCode() : 0);
      result = result * 37 + (updatedAt != null ? updatedAt.hashCode() : 0);
      result = result * 37 + (user != null ? user.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (title != null) builder.append(", title=").append(title);
    if (description != null) builder.append(", description=").append(description);
    if (code != null) builder.append(", code=").append(code);
    if (coverUrl != null) builder.append(", coverUrl=").append(coverUrl);
    if (createdAt != null) builder.append(", createdAt=").append(createdAt);
    if (facebookSiteUrl != null) builder.append(", facebookSiteUrl=").append(facebookSiteUrl);
    if (followerCount != null) builder.append(", followerCount=").append(followerCount);
    if (imageUrl != null) builder.append(", imageUrl=").append(imageUrl);
    if (isFollowing != null) builder.append(", isFollowing=").append(isFollowing);
    if (isPublished != null) builder.append(", isPublished=").append(isPublished);
    if (lineAtSiteUrl != null) builder.append(", lineAtSiteUrl=").append(lineAtSiteUrl);
    if (permalink != null) builder.append(", permalink=").append(permalink);
    if (siteUrl != null) builder.append(", siteUrl=").append(siteUrl);
    if (twitterSiteUrl != null) builder.append(", twitterSiteUrl=").append(twitterSiteUrl);
    if (updatedAt != null) builder.append(", updatedAt=").append(updatedAt);
    if (user != null) builder.append(", user=").append(user);
    return builder.replace(0, 2, "FreshChannel{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FreshChannel, Builder> {
    public String id;

    public String title;

    public String description;

    public String code;

    public String coverUrl;

    public String createdAt;

    public String facebookSiteUrl;

    public Integer followerCount;

    public String imageUrl;

    public Boolean isFollowing;

    public Boolean isPublished;

    public String lineAtSiteUrl;

    public String permalink;

    public String siteUrl;

    public String twitterSiteUrl;

    public String updatedAt;

    public FreshUser user;

    public Builder() {
    }

    /**
     * / ユーザーID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / チャネル名
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * / チャネル概要
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * / チャネルコード
     */
    public Builder code(String code) {
      this.code = code;
      return this;
    }

    /**
     * / カバー画像URL
     */
    public Builder coverUrl(String coverUrl) {
      this.coverUrl = coverUrl;
      return this;
    }

    /**
     * / 作成日時
     */
    public Builder createdAt(String createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    /**
     * / FacebookサイトURL
     */
    public Builder facebookSiteUrl(String facebookSiteUrl) {
      this.facebookSiteUrl = facebookSiteUrl;
      return this;
    }

    /**
     * / フォロワー数
     */
    public Builder followerCount(Integer followerCount) {
      this.followerCount = followerCount;
      return this;
    }

    /**
     * / 画像URL
     */
    public Builder imageUrl(String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    /**
     * / フォロー中フラグ
     */
    public Builder isFollowing(Boolean isFollowing) {
      this.isFollowing = isFollowing;
      return this;
    }

    /**
     * / 公開済みフラグ
     */
    public Builder isPublished(Boolean isPublished) {
      this.isPublished = isPublished;
      return this;
    }

    /**
     * / LineサイトURL
     */
    public Builder lineAtSiteUrl(String lineAtSiteUrl) {
      this.lineAtSiteUrl = lineAtSiteUrl;
      return this;
    }

    /**
     * / リンク先URL
     */
    public Builder permalink(String permalink) {
      this.permalink = permalink;
      return this;
    }

    /**
     * / サイトURL
     */
    public Builder siteUrl(String siteUrl) {
      this.siteUrl = siteUrl;
      return this;
    }

    /**
     * / TwitterサイトURL
     */
    public Builder twitterSiteUrl(String twitterSiteUrl) {
      this.twitterSiteUrl = twitterSiteUrl;
      return this;
    }

    /**
     * / 更新日時
     */
    public Builder updatedAt(String updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    /**
     * / チャネルオーナー
     */
    public Builder user(FreshUser user) {
      this.user = user;
      return this;
    }

    @Override
    public FreshChannel build() {
      return new FreshChannel(id, title, description, code, coverUrl, createdAt, facebookSiteUrl, followerCount, imageUrl, isFollowing, isPublished, lineAtSiteUrl, permalink, siteUrl, twitterSiteUrl, updatedAt, user, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FreshChannel extends ProtoAdapter<FreshChannel> {
    ProtoAdapter_FreshChannel() {
      super(FieldEncoding.LENGTH_DELIMITED, FreshChannel.class);
    }

    @Override
    public int encodedSize(FreshChannel value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.title) : 0)
          + (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.description) : 0)
          + (value.code != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.code) : 0)
          + (value.coverUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.coverUrl) : 0)
          + (value.createdAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.createdAt) : 0)
          + (value.facebookSiteUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.facebookSiteUrl) : 0)
          + (value.followerCount != null ? ProtoAdapter.INT32.encodedSizeWithTag(8, value.followerCount) : 0)
          + (value.imageUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.imageUrl) : 0)
          + (value.isFollowing != null ? ProtoAdapter.BOOL.encodedSizeWithTag(10, value.isFollowing) : 0)
          + (value.isPublished != null ? ProtoAdapter.BOOL.encodedSizeWithTag(11, value.isPublished) : 0)
          + (value.lineAtSiteUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.lineAtSiteUrl) : 0)
          + (value.permalink != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.permalink) : 0)
          + (value.siteUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.siteUrl) : 0)
          + (value.twitterSiteUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.twitterSiteUrl) : 0)
          + (value.updatedAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.updatedAt) : 0)
          + (value.user != null ? FreshUser.ADAPTER.encodedSizeWithTag(50, value.user) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FreshChannel value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.title);
      if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.description);
      if (value.code != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.code);
      if (value.coverUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.coverUrl);
      if (value.createdAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.createdAt);
      if (value.facebookSiteUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.facebookSiteUrl);
      if (value.followerCount != null) ProtoAdapter.INT32.encodeWithTag(writer, 8, value.followerCount);
      if (value.imageUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.imageUrl);
      if (value.isFollowing != null) ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.isFollowing);
      if (value.isPublished != null) ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.isPublished);
      if (value.lineAtSiteUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.lineAtSiteUrl);
      if (value.permalink != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.permalink);
      if (value.siteUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.siteUrl);
      if (value.twitterSiteUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.twitterSiteUrl);
      if (value.updatedAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.updatedAt);
      if (value.user != null) FreshUser.ADAPTER.encodeWithTag(writer, 50, value.user);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FreshChannel decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.description(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.code(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.coverUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.createdAt(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.facebookSiteUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.followerCount(ProtoAdapter.INT32.decode(reader)); break;
          case 9: builder.imageUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.isFollowing(ProtoAdapter.BOOL.decode(reader)); break;
          case 11: builder.isPublished(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.lineAtSiteUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.permalink(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.siteUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.twitterSiteUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.updatedAt(ProtoAdapter.STRING.decode(reader)); break;
          case 50: builder.user(FreshUser.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FreshChannel redact(FreshChannel value) {
      Builder builder = value.newBuilder();
      if (builder.user != null) builder.user = FreshUser.ADAPTER.redact(builder.user);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
