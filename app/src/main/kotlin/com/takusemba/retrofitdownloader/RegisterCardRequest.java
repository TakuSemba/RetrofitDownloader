// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/subscription.proto at 29:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / 購入用クレジットカード有効ユーザー登録 request
 */
public final class RegisterCardRequest extends Message<RegisterCardRequest, RegisterCardRequest.Builder> {
  public static final ProtoAdapter<RegisterCardRequest> ADAPTER = new ProtoAdapter_RegisterCardRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SITEID = "";

  public static final String DEFAULT_SHOPID = "";

  public static final String DEFAULT_DATETIME = "";

  public static final String DEFAULT_CHECKSTRING = "";

  /**
   * / サイトID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String siteId;

  /**
   * / ショップID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String shopId;

  /**
   * / 日時情報
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String dateTime;

  /**
   * / チェック文字列(パラメータ改ざんチェック用)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String checkString;

  public RegisterCardRequest(String siteId, String shopId, String dateTime, String checkString) {
    this(siteId, shopId, dateTime, checkString, ByteString.EMPTY);
  }

  public RegisterCardRequest(String siteId, String shopId, String dateTime, String checkString, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.siteId = siteId;
    this.shopId = shopId;
    this.dateTime = dateTime;
    this.checkString = checkString;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.siteId = siteId;
    builder.shopId = shopId;
    builder.dateTime = dateTime;
    builder.checkString = checkString;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RegisterCardRequest)) return false;
    RegisterCardRequest o = (RegisterCardRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(siteId, o.siteId)
        && Internal.equals(shopId, o.shopId)
        && Internal.equals(dateTime, o.dateTime)
        && Internal.equals(checkString, o.checkString);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (siteId != null ? siteId.hashCode() : 0);
      result = result * 37 + (shopId != null ? shopId.hashCode() : 0);
      result = result * 37 + (dateTime != null ? dateTime.hashCode() : 0);
      result = result * 37 + (checkString != null ? checkString.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (siteId != null) builder.append(", siteId=").append(siteId);
    if (shopId != null) builder.append(", shopId=").append(shopId);
    if (dateTime != null) builder.append(", dateTime=").append(dateTime);
    if (checkString != null) builder.append(", checkString=").append(checkString);
    return builder.replace(0, 2, "RegisterCardRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RegisterCardRequest, Builder> {
    public String siteId;

    public String shopId;

    public String dateTime;

    public String checkString;

    public Builder() {
    }

    /**
     * / サイトID
     */
    public Builder siteId(String siteId) {
      this.siteId = siteId;
      return this;
    }

    /**
     * / ショップID
     */
    public Builder shopId(String shopId) {
      this.shopId = shopId;
      return this;
    }

    /**
     * / 日時情報
     */
    public Builder dateTime(String dateTime) {
      this.dateTime = dateTime;
      return this;
    }

    /**
     * / チェック文字列(パラメータ改ざんチェック用)
     */
    public Builder checkString(String checkString) {
      this.checkString = checkString;
      return this;
    }

    @Override
    public RegisterCardRequest build() {
      return new RegisterCardRequest(siteId, shopId, dateTime, checkString, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RegisterCardRequest extends ProtoAdapter<RegisterCardRequest> {
    ProtoAdapter_RegisterCardRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, RegisterCardRequest.class);
    }

    @Override
    public int encodedSize(RegisterCardRequest value) {
      return (value.siteId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.siteId) : 0)
          + (value.shopId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.shopId) : 0)
          + (value.dateTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.dateTime) : 0)
          + (value.checkString != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.checkString) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RegisterCardRequest value) throws IOException {
      if (value.siteId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.siteId);
      if (value.shopId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.shopId);
      if (value.dateTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.dateTime);
      if (value.checkString != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.checkString);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RegisterCardRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.siteId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.shopId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.dateTime(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.checkString(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RegisterCardRequest redact(RegisterCardRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
