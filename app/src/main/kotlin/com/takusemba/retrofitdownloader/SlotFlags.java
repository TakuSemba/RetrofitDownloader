// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/media.proto at 172:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / フラグ
 */
public final class SlotFlags extends Message<SlotFlags, SlotFlags.Builder> {
  public static final ProtoAdapter<SlotFlags> ADAPTER = new ProtoAdapter_SlotFlags();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_PAUSED = false;

  public static final Boolean DEFAULT_SHARE = false;

  public static final Boolean DEFAULT_TIMESHIFT = false;

  public static final SharingPolicy DEFAULT_SHARINGPOLICY = SharingPolicy.DISALLOW;

  public static final Boolean DEFAULT_TIMESHIFTFREE = false;

  public static final Boolean DEFAULT_DASH = false;

  /**
   * / 放送休止
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean paused;

  /**
   * / 動画シェア可否
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean share;

  /**
   * / タイムシフト可否
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean timeshift;

  /**
   * / シェア方針
   */
  @WireField(
      tag = 4,
      adapter = "tv.abema.protos.SharingPolicy#ADAPTER"
  )
  public final SharingPolicy sharingPolicy;

  /**
   * / タイムシフト無料可否
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean timeshiftFree;

  /**
   * / MPEG-DASH 配信可否
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean dash;

  public SlotFlags(Boolean paused, Boolean share, Boolean timeshift, SharingPolicy sharingPolicy, Boolean timeshiftFree, Boolean dash) {
    this(paused, share, timeshift, sharingPolicy, timeshiftFree, dash, ByteString.EMPTY);
  }

  public SlotFlags(Boolean paused, Boolean share, Boolean timeshift, SharingPolicy sharingPolicy, Boolean timeshiftFree, Boolean dash, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.paused = paused;
    this.share = share;
    this.timeshift = timeshift;
    this.sharingPolicy = sharingPolicy;
    this.timeshiftFree = timeshiftFree;
    this.dash = dash;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.paused = paused;
    builder.share = share;
    builder.timeshift = timeshift;
    builder.sharingPolicy = sharingPolicy;
    builder.timeshiftFree = timeshiftFree;
    builder.dash = dash;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SlotFlags)) return false;
    SlotFlags o = (SlotFlags) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(paused, o.paused)
        && Internal.equals(share, o.share)
        && Internal.equals(timeshift, o.timeshift)
        && Internal.equals(sharingPolicy, o.sharingPolicy)
        && Internal.equals(timeshiftFree, o.timeshiftFree)
        && Internal.equals(dash, o.dash);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (paused != null ? paused.hashCode() : 0);
      result = result * 37 + (share != null ? share.hashCode() : 0);
      result = result * 37 + (timeshift != null ? timeshift.hashCode() : 0);
      result = result * 37 + (sharingPolicy != null ? sharingPolicy.hashCode() : 0);
      result = result * 37 + (timeshiftFree != null ? timeshiftFree.hashCode() : 0);
      result = result * 37 + (dash != null ? dash.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (paused != null) builder.append(", paused=").append(paused);
    if (share != null) builder.append(", share=").append(share);
    if (timeshift != null) builder.append(", timeshift=").append(timeshift);
    if (sharingPolicy != null) builder.append(", sharingPolicy=").append(sharingPolicy);
    if (timeshiftFree != null) builder.append(", timeshiftFree=").append(timeshiftFree);
    if (dash != null) builder.append(", dash=").append(dash);
    return builder.replace(0, 2, "SlotFlags{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SlotFlags, Builder> {
    public Boolean paused;

    public Boolean share;

    public Boolean timeshift;

    public SharingPolicy sharingPolicy;

    public Boolean timeshiftFree;

    public Boolean dash;

    public Builder() {
    }

    /**
     * / 放送休止
     */
    public Builder paused(Boolean paused) {
      this.paused = paused;
      return this;
    }

    /**
     * / 動画シェア可否
     */
    public Builder share(Boolean share) {
      this.share = share;
      return this;
    }

    /**
     * / タイムシフト可否
     */
    public Builder timeshift(Boolean timeshift) {
      this.timeshift = timeshift;
      return this;
    }

    /**
     * / シェア方針
     */
    public Builder sharingPolicy(SharingPolicy sharingPolicy) {
      this.sharingPolicy = sharingPolicy;
      return this;
    }

    /**
     * / タイムシフト無料可否
     */
    public Builder timeshiftFree(Boolean timeshiftFree) {
      this.timeshiftFree = timeshiftFree;
      return this;
    }

    /**
     * / MPEG-DASH 配信可否
     */
    public Builder dash(Boolean dash) {
      this.dash = dash;
      return this;
    }

    @Override
    public SlotFlags build() {
      return new SlotFlags(paused, share, timeshift, sharingPolicy, timeshiftFree, dash, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SlotFlags extends ProtoAdapter<SlotFlags> {
    ProtoAdapter_SlotFlags() {
      super(FieldEncoding.LENGTH_DELIMITED, SlotFlags.class);
    }

    @Override
    public int encodedSize(SlotFlags value) {
      return (value.paused != null ? ProtoAdapter.BOOL.encodedSizeWithTag(1, value.paused) : 0)
          + (value.share != null ? ProtoAdapter.BOOL.encodedSizeWithTag(2, value.share) : 0)
          + (value.timeshift != null ? ProtoAdapter.BOOL.encodedSizeWithTag(3, value.timeshift) : 0)
          + (value.sharingPolicy != null ? SharingPolicy.ADAPTER.encodedSizeWithTag(4, value.sharingPolicy) : 0)
          + (value.timeshiftFree != null ? ProtoAdapter.BOOL.encodedSizeWithTag(5, value.timeshiftFree) : 0)
          + (value.dash != null ? ProtoAdapter.BOOL.encodedSizeWithTag(6, value.dash) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SlotFlags value) throws IOException {
      if (value.paused != null) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.paused);
      if (value.share != null) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.share);
      if (value.timeshift != null) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.timeshift);
      if (value.sharingPolicy != null) SharingPolicy.ADAPTER.encodeWithTag(writer, 4, value.sharingPolicy);
      if (value.timeshiftFree != null) ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.timeshiftFree);
      if (value.dash != null) ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.dash);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SlotFlags decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.paused(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.share(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.timeshift(ProtoAdapter.BOOL.decode(reader)); break;
          case 4: {
            try {
              builder.sharingPolicy(SharingPolicy.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.timeshiftFree(ProtoAdapter.BOOL.decode(reader)); break;
          case 6: builder.dash(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SlotFlags redact(SlotFlags value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
