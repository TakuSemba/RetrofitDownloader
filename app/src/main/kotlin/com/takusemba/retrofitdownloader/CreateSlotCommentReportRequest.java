// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/report.proto at 12:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / Request model for create slot comment report api
 */
public final class CreateSlotCommentReportRequest extends Message<CreateSlotCommentReportRequest, CreateSlotCommentReportRequest.Builder> {
  public static final ProtoAdapter<CreateSlotCommentReportRequest> ADAPTER = new ProtoAdapter_CreateSlotCommentReportRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_USERID = "";

  public static final String DEFAULT_COMMENTID = "";

  public static final String DEFAULT_COMMENTCONTENT = "";

  public static final Long DEFAULT_COMMENTCREATEDATMS = 0L;

  public static final Reason DEFAULT_REASON = Reason.UNKNOWN;

  /**
   * / 対象ユーザID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userId;

  /**
   * / 対象コメントID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String commentId;

  /**
   * / 対象コメント内容
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String commentContent;

  /**
   * / 対象コメント作成時間
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long commentCreatedAtMs;

  /**
   * / 通報理由
   */
  @WireField(
      tag = 5,
      adapter = "tv.abema.protos.CreateSlotCommentReportRequest$Reason#ADAPTER"
  )
  public final Reason reason;

  public CreateSlotCommentReportRequest(String userId, String commentId, String commentContent, Long commentCreatedAtMs, Reason reason) {
    this(userId, commentId, commentContent, commentCreatedAtMs, reason, ByteString.EMPTY);
  }

  public CreateSlotCommentReportRequest(String userId, String commentId, String commentContent, Long commentCreatedAtMs, Reason reason, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.userId = userId;
    this.commentId = commentId;
    this.commentContent = commentContent;
    this.commentCreatedAtMs = commentCreatedAtMs;
    this.reason = reason;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.userId = userId;
    builder.commentId = commentId;
    builder.commentContent = commentContent;
    builder.commentCreatedAtMs = commentCreatedAtMs;
    builder.reason = reason;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CreateSlotCommentReportRequest)) return false;
    CreateSlotCommentReportRequest o = (CreateSlotCommentReportRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(userId, o.userId)
        && Internal.equals(commentId, o.commentId)
        && Internal.equals(commentContent, o.commentContent)
        && Internal.equals(commentCreatedAtMs, o.commentCreatedAtMs)
        && Internal.equals(reason, o.reason);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (commentId != null ? commentId.hashCode() : 0);
      result = result * 37 + (commentContent != null ? commentContent.hashCode() : 0);
      result = result * 37 + (commentCreatedAtMs != null ? commentCreatedAtMs.hashCode() : 0);
      result = result * 37 + (reason != null ? reason.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (userId != null) builder.append(", userId=").append(userId);
    if (commentId != null) builder.append(", commentId=").append(commentId);
    if (commentContent != null) builder.append(", commentContent=").append(commentContent);
    if (commentCreatedAtMs != null) builder.append(", commentCreatedAtMs=").append(commentCreatedAtMs);
    if (reason != null) builder.append(", reason=").append(reason);
    return builder.replace(0, 2, "CreateSlotCommentReportRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CreateSlotCommentReportRequest, Builder> {
    public String userId;

    public String commentId;

    public String commentContent;

    public Long commentCreatedAtMs;

    public Reason reason;

    public Builder() {
    }

    /**
     * / 対象ユーザID
     */
    public Builder userId(String userId) {
      this.userId = userId;
      return this;
    }

    /**
     * / 対象コメントID
     */
    public Builder commentId(String commentId) {
      this.commentId = commentId;
      return this;
    }

    /**
     * / 対象コメント内容
     */
    public Builder commentContent(String commentContent) {
      this.commentContent = commentContent;
      return this;
    }

    /**
     * / 対象コメント作成時間
     */
    public Builder commentCreatedAtMs(Long commentCreatedAtMs) {
      this.commentCreatedAtMs = commentCreatedAtMs;
      return this;
    }

    /**
     * / 通報理由
     */
    public Builder reason(Reason reason) {
      this.reason = reason;
      return this;
    }

    @Override
    public CreateSlotCommentReportRequest build() {
      return new CreateSlotCommentReportRequest(userId, commentId, commentContent, commentCreatedAtMs, reason, buildUnknownFields());
    }
  }

  /**
   * / 通報理由
   */
  public enum Reason implements WireEnum {
    /**
     * / 不明
     */
    UNKNOWN(0),

    /**
     * / 個人情報の投稿や権利の侵害
     */
    INFRINGEMENT(1),

    /**
     * / 出会いを目的とした行為
     */
    ENCOUNTER(2),

    /**
     * / 公序良俗に反する内容
     */
    IMMORAL(3),

    /**
     * / スパム行為・荒らしなどの迷惑行為
     */
    SPAM(4),

    /**
     * / その他不適切な内容
     */
    OTHER(5);

    public static final ProtoAdapter<Reason> ADAPTER = ProtoAdapter.newEnumAdapter(Reason.class);

    private final int value;

    Reason(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Reason fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return INFRINGEMENT;
        case 2: return ENCOUNTER;
        case 3: return IMMORAL;
        case 4: return SPAM;
        case 5: return OTHER;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_CreateSlotCommentReportRequest extends ProtoAdapter<CreateSlotCommentReportRequest> {
    ProtoAdapter_CreateSlotCommentReportRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, CreateSlotCommentReportRequest.class);
    }

    @Override
    public int encodedSize(CreateSlotCommentReportRequest value) {
      return (value.userId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.userId) : 0)
          + (value.commentId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.commentId) : 0)
          + (value.commentContent != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.commentContent) : 0)
          + (value.commentCreatedAtMs != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.commentCreatedAtMs) : 0)
          + (value.reason != null ? Reason.ADAPTER.encodedSizeWithTag(5, value.reason) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CreateSlotCommentReportRequest value) throws IOException {
      if (value.userId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.userId);
      if (value.commentId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.commentId);
      if (value.commentContent != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.commentContent);
      if (value.commentCreatedAtMs != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.commentCreatedAtMs);
      if (value.reason != null) Reason.ADAPTER.encodeWithTag(writer, 5, value.reason);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CreateSlotCommentReportRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.userId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.commentId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.commentContent(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.commentCreatedAtMs(ProtoAdapter.INT64.decode(reader)); break;
          case 5: {
            try {
              builder.reason(Reason.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CreateSlotCommentReportRequest redact(CreateSlotCommentReportRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
