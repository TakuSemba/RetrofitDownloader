// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/media.proto at 243:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Audience data of broadcasting slot
 */
public final class SlotAudience extends Message<SlotAudience, SlotAudience.Builder> {
  public static final ProtoAdapter<SlotAudience> ADAPTER = new ProtoAdapter_SlotAudience();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SLOTID = "";

  public static final String DEFAULT_CHANNELID = "";

  public static final Integer DEFAULT_VIEWCOUNT = 0;

  public static final Integer DEFAULT_TWEETCOUNT = 0;

  public static final Long DEFAULT_COMMENTCOUNT = 0L;

  /**
   * / Slot ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String slotId;

  /**
   * / Channel ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String channelId;

  /**
   * / Total number of view
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer viewCount;

  /**
   * / Total number of tweets
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer tweetCount;

  /**
   * / Total number of comments
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long commentCount;

  public SlotAudience(String slotId, String channelId, Integer viewCount, Integer tweetCount, Long commentCount) {
    this(slotId, channelId, viewCount, tweetCount, commentCount, ByteString.EMPTY);
  }

  public SlotAudience(String slotId, String channelId, Integer viewCount, Integer tweetCount, Long commentCount, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.slotId = slotId;
    this.channelId = channelId;
    this.viewCount = viewCount;
    this.tweetCount = tweetCount;
    this.commentCount = commentCount;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.slotId = slotId;
    builder.channelId = channelId;
    builder.viewCount = viewCount;
    builder.tweetCount = tweetCount;
    builder.commentCount = commentCount;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SlotAudience)) return false;
    SlotAudience o = (SlotAudience) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(slotId, o.slotId)
        && Internal.equals(channelId, o.channelId)
        && Internal.equals(viewCount, o.viewCount)
        && Internal.equals(tweetCount, o.tweetCount)
        && Internal.equals(commentCount, o.commentCount);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (slotId != null ? slotId.hashCode() : 0);
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (viewCount != null ? viewCount.hashCode() : 0);
      result = result * 37 + (tweetCount != null ? tweetCount.hashCode() : 0);
      result = result * 37 + (commentCount != null ? commentCount.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (slotId != null) builder.append(", slotId=").append(slotId);
    if (channelId != null) builder.append(", channelId=").append(channelId);
    if (viewCount != null) builder.append(", viewCount=").append(viewCount);
    if (tweetCount != null) builder.append(", tweetCount=").append(tweetCount);
    if (commentCount != null) builder.append(", commentCount=").append(commentCount);
    return builder.replace(0, 2, "SlotAudience{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SlotAudience, Builder> {
    public String slotId;

    public String channelId;

    public Integer viewCount;

    public Integer tweetCount;

    public Long commentCount;

    public Builder() {
    }

    /**
     * / Slot ID
     */
    public Builder slotId(String slotId) {
      this.slotId = slotId;
      return this;
    }

    /**
     * / Channel ID
     */
    public Builder channelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * / Total number of view
     */
    public Builder viewCount(Integer viewCount) {
      this.viewCount = viewCount;
      return this;
    }

    /**
     * / Total number of tweets
     */
    public Builder tweetCount(Integer tweetCount) {
      this.tweetCount = tweetCount;
      return this;
    }

    /**
     * / Total number of comments
     */
    public Builder commentCount(Long commentCount) {
      this.commentCount = commentCount;
      return this;
    }

    @Override
    public SlotAudience build() {
      return new SlotAudience(slotId, channelId, viewCount, tweetCount, commentCount, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SlotAudience extends ProtoAdapter<SlotAudience> {
    ProtoAdapter_SlotAudience() {
      super(FieldEncoding.LENGTH_DELIMITED, SlotAudience.class);
    }

    @Override
    public int encodedSize(SlotAudience value) {
      return (value.slotId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.slotId) : 0)
          + (value.channelId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.channelId) : 0)
          + (value.viewCount != null ? ProtoAdapter.INT32.encodedSizeWithTag(3, value.viewCount) : 0)
          + (value.tweetCount != null ? ProtoAdapter.INT32.encodedSizeWithTag(4, value.tweetCount) : 0)
          + (value.commentCount != null ? ProtoAdapter.INT64.encodedSizeWithTag(5, value.commentCount) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SlotAudience value) throws IOException {
      if (value.slotId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.slotId);
      if (value.channelId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.channelId);
      if (value.viewCount != null) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.viewCount);
      if (value.tweetCount != null) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.tweetCount);
      if (value.commentCount != null) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.commentCount);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SlotAudience decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.slotId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.channelId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.viewCount(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.tweetCount(ProtoAdapter.INT32.decode(reader)); break;
          case 5: builder.commentCount(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SlotAudience redact(SlotAudience value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
