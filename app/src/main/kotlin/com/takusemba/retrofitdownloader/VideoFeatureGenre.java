// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/video_feature.proto at 74:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / ビデオTOPのジャンル特集枠
 */
public final class VideoFeatureGenre extends Message<VideoFeatureGenre, VideoFeatureGenre.Builder> {
  public static final ProtoAdapter<VideoFeatureGenre> ADAPTER = new ProtoAdapter_VideoFeatureGenre();

  private static final long serialVersionUID = 0L;

  /**
   * / ジャンル
   */
  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.VideoGenre#ADAPTER"
  )
  public final VideoGenre genre;

  /**
   * / カード一覧
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.VideoCard#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VideoCard> cards;

  public VideoFeatureGenre(VideoGenre genre, List<VideoCard> cards) {
    this(genre, cards, ByteString.EMPTY);
  }

  public VideoFeatureGenre(VideoGenre genre, List<VideoCard> cards, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.genre = genre;
    this.cards = Internal.immutableCopyOf("cards", cards);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.genre = genre;
    builder.cards = Internal.copyOf("cards", cards);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VideoFeatureGenre)) return false;
    VideoFeatureGenre o = (VideoFeatureGenre) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(genre, o.genre)
        && Internal.equals(cards, o.cards);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (genre != null ? genre.hashCode() : 0);
      result = result * 37 + (cards != null ? cards.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (genre != null) builder.append(", genre=").append(genre);
    if (cards != null) builder.append(", cards=").append(cards);
    return builder.replace(0, 2, "VideoFeatureGenre{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<VideoFeatureGenre, Builder> {
    public VideoGenre genre;

    public List<VideoCard> cards;

    public Builder() {
      cards = Internal.newMutableList();
    }

    /**
     * / ジャンル
     */
    public Builder genre(VideoGenre genre) {
      this.genre = genre;
      return this;
    }

    /**
     * / カード一覧
     */
    public Builder cards(List<VideoCard> cards) {
      Internal.checkElementsNotNull(cards);
      this.cards = cards;
      return this;
    }

    @Override
    public VideoFeatureGenre build() {
      return new VideoFeatureGenre(genre, cards, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VideoFeatureGenre extends ProtoAdapter<VideoFeatureGenre> {
    ProtoAdapter_VideoFeatureGenre() {
      super(FieldEncoding.LENGTH_DELIMITED, VideoFeatureGenre.class);
    }

    @Override
    public int encodedSize(VideoFeatureGenre value) {
      return (value.genre != null ? VideoGenre.ADAPTER.encodedSizeWithTag(1, value.genre) : 0)
          + VideoCard.ADAPTER.asRepeated().encodedSizeWithTag(2, value.cards)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VideoFeatureGenre value) throws IOException {
      if (value.genre != null) VideoGenre.ADAPTER.encodeWithTag(writer, 1, value.genre);
      if (value.cards != null) VideoCard.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.cards);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VideoFeatureGenre decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.genre(VideoGenre.ADAPTER.decode(reader)); break;
          case 2: builder.cards.add(VideoCard.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VideoFeatureGenre redact(VideoFeatureGenre value) {
      Builder builder = value.newBuilder();
      if (builder.genre != null) builder.genre = VideoGenre.ADAPTER.redact(builder.genre);
      Internal.redactElements(builder.cards, VideoCard.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
