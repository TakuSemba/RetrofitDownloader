// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/fresh.proto at 11:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / Freshフィード情報
 */
public final class FreshFeed extends Message<FreshFeed, FreshFeed.Builder> {
  public static final ProtoAdapter<FreshFeed> ADAPTER = new ProtoAdapter_FreshFeed();

  private static final long serialVersionUID = 0L;

  /**
   * / Fresh番組一覧
   */
  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.FreshProgram#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<FreshProgram> programs;

  public FreshFeed(List<FreshProgram> programs) {
    this(programs, ByteString.EMPTY);
  }

  public FreshFeed(List<FreshProgram> programs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.programs = Internal.immutableCopyOf("programs", programs);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.programs = Internal.copyOf("programs", programs);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FreshFeed)) return false;
    FreshFeed o = (FreshFeed) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(programs, o.programs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (programs != null ? programs.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (programs != null) builder.append(", programs=").append(programs);
    return builder.replace(0, 2, "FreshFeed{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FreshFeed, Builder> {
    public List<FreshProgram> programs;

    public Builder() {
      programs = Internal.newMutableList();
    }

    /**
     * / Fresh番組一覧
     */
    public Builder programs(List<FreshProgram> programs) {
      Internal.checkElementsNotNull(programs);
      this.programs = programs;
      return this;
    }

    @Override
    public FreshFeed build() {
      return new FreshFeed(programs, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FreshFeed extends ProtoAdapter<FreshFeed> {
    ProtoAdapter_FreshFeed() {
      super(FieldEncoding.LENGTH_DELIMITED, FreshFeed.class);
    }

    @Override
    public int encodedSize(FreshFeed value) {
      return FreshProgram.ADAPTER.asRepeated().encodedSizeWithTag(1, value.programs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FreshFeed value) throws IOException {
      if (value.programs != null) FreshProgram.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.programs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FreshFeed decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.programs.add(FreshProgram.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FreshFeed redact(FreshFeed value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.programs, FreshProgram.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
