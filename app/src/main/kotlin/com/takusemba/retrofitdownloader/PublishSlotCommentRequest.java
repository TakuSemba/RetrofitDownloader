// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/comment.proto at 20:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / PublishSlotCommentRequest represents a request of publishing a comment about the broadcast slot.
 */
public final class PublishSlotCommentRequest extends Message<PublishSlotCommentRequest, PublishSlotCommentRequest.Builder> {
  public static final ProtoAdapter<PublishSlotCommentRequest> ADAPTER = new ProtoAdapter_PublishSlotCommentRequest();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MESSAGE = "";

  /**
   * / Message
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String message;

  /**
   * / Share on SNS
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.SlotShare#ADAPTER"
  )
  public final SlotShare share;

  public PublishSlotCommentRequest(String message, SlotShare share) {
    this(message, share, ByteString.EMPTY);
  }

  public PublishSlotCommentRequest(String message, SlotShare share, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.message = message;
    this.share = share;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.message = message;
    builder.share = share;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PublishSlotCommentRequest)) return false;
    PublishSlotCommentRequest o = (PublishSlotCommentRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(message, o.message)
        && Internal.equals(share, o.share);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (message != null ? message.hashCode() : 0);
      result = result * 37 + (share != null ? share.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (message != null) builder.append(", message=").append(message);
    if (share != null) builder.append(", share=").append(share);
    return builder.replace(0, 2, "PublishSlotCommentRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PublishSlotCommentRequest, Builder> {
    public String message;

    public SlotShare share;

    public Builder() {
    }

    /**
     * / Message
     */
    public Builder message(String message) {
      this.message = message;
      return this;
    }

    /**
     * / Share on SNS
     */
    public Builder share(SlotShare share) {
      this.share = share;
      return this;
    }

    @Override
    public PublishSlotCommentRequest build() {
      return new PublishSlotCommentRequest(message, share, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PublishSlotCommentRequest extends ProtoAdapter<PublishSlotCommentRequest> {
    ProtoAdapter_PublishSlotCommentRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, PublishSlotCommentRequest.class);
    }

    @Override
    public int encodedSize(PublishSlotCommentRequest value) {
      return (value.message != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.message) : 0)
          + (value.share != null ? SlotShare.ADAPTER.encodedSizeWithTag(2, value.share) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PublishSlotCommentRequest value) throws IOException {
      if (value.message != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.message);
      if (value.share != null) SlotShare.ADAPTER.encodeWithTag(writer, 2, value.share);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PublishSlotCommentRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.message(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.share(SlotShare.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PublishSlotCommentRequest redact(PublishSlotCommentRequest value) {
      Builder builder = value.newBuilder();
      if (builder.share != null) builder.share = SlotShare.ADAPTER.redact(builder.share);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
