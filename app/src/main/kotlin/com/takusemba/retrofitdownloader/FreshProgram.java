// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/fresh.proto at 16:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / Fresh番組情報
 */
public final class FreshProgram extends Message<FreshProgram, FreshProgram.Builder> {
  public static final ProtoAdapter<FreshProgram> ADAPTER = new ProtoAdapter_FreshProgram();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final Long DEFAULT_AIRTIME = 0L;

  public static final String DEFAULT_ARCHIVESTREAMURL = "";

  public static final Long DEFAULT_COMMENTCOUNT = 0L;

  public static final String DEFAULT_CREATEDAT = "";

  public static final String DEFAULT_DESCRIPTION = "";

  public static final String DEFAULT_DESCRIPTIONIMAGEURL = "";

  public static final String DEFAULT_ENDAT = "";

  public static final Boolean DEFAULT_ISARCHIVEPUBLISHED = false;

  public static final Boolean DEFAULT_ISARCHIVING = false;

  public static final Boolean DEFAULT_ISDISABLEDCOMMENT = false;

  public static final Boolean DEFAULT_ISEMBED = false;

  public static final Boolean DEFAULT_ISLINEARTV = false;

  public static final Boolean DEFAULT_ISPAUSE = false;

  public static final Boolean DEFAULT_ISPUBLISHED = false;

  public static final Long DEFAULT_LASTVIEWCOUNT = 0L;

  public static final String DEFAULT_LIVESTREAMURL = "";

  public static final String DEFAULT_LIVETYPE = "";

  public static final String DEFAULT_ORIGINALID = "";

  public static final String DEFAULT_PAYMENTSTATUS = "";

  public static final String DEFAULT_PERMALINK = "";

  public static final String DEFAULT_SCHEDULEDSTARTAT = "";

  public static final String DEFAULT_SCHEDULEDENDAT = "";

  public static final String DEFAULT_STARTAT = "";

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final String DEFAULT_STATUS = "";

  public static final String DEFAULT_THUMBNAILURL = "";

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_UPDATEDAT = "";

  public static final Long DEFAULT_VIEWCOUNT = 0L;

  /**
   * / 番組ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / 放送時間
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long airTime;

  /**
   * / アーカイブ用URL
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String archiveStreamUrl;

  /**
   * / キャスト一覧
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> casts;

  /**
   * / コメント数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long commentCount;

  /**
   * / 作成日時(ISO)
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createdAt;

  /**
   * / 番組詳細
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String description;

  /**
   * / 詳細画像URL
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String descriptionImageUrl;

  /**
   * / 終了日時
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String endAt;

  /**
   * / アーカイブ公開フラグ
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isArchivePublished;

  /**
   * / アーカイブ中フラグ
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isArchiving;

  /**
   * / コメント不可フラグ
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isDisabledComment;

  /**
   * / EMBED可否フラグ
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isEmbed;

  /**
   * / リニア放送フラグ
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isLineartv;

  /**
   * / 休止中フラグ
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isPause;

  /**
   * / 公開済みフラグ
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isPublished;

  /**
   * / 前回放送の視聴数?
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long lastViewCount;

  /**
   * / ライブ再生用URL
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liveStreamUrl;

  /**
   * / ライブ種類 live, tempLive
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String liveType;

  /**
   * / オリジナルID?
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String originalId;

  /**
   * / 支払いステータス free
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String paymentStatus;

  /**
   * / リンク先URL
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String permalink;

  /**
   * / 放送開始予定日時
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String scheduledStartAt;

  /**
   * / 放送終了予定日時
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String scheduledEndAt;

  /**
   * / 開始日時
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String startAt;

  /**
   * / 開始時間?
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long startTime;

  /**
   * / ステータス onair=配信中, archive=アーカイブ完了, upcoming=配信前
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String status;

  /**
   * / タグ一覧
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> tags;

  /**
   * / サムネイル画像URL
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String thumbnailUrl;

  /**
   * / 番組名
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * / 更新日時
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updatedAt;

  /**
   * / 視聴数
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long viewCount;

  @WireField(
      tag = 50,
      adapter = "tv.abema.protos.FreshChannel#ADAPTER"
  )
  public final FreshChannel channel;

  public FreshProgram(String id, Long airTime, String archiveStreamUrl, List<String> casts, Long commentCount, String createdAt, String description, String descriptionImageUrl, String endAt, Boolean isArchivePublished, Boolean isArchiving, Boolean isDisabledComment, Boolean isEmbed, Boolean isLineartv, Boolean isPause, Boolean isPublished, Long lastViewCount, String liveStreamUrl, String liveType, String originalId, String paymentStatus, String permalink, String scheduledStartAt, String scheduledEndAt, String startAt, Long startTime, String status, List<String> tags, String thumbnailUrl, String title, String updatedAt, Long viewCount, FreshChannel channel) {
    this(id, airTime, archiveStreamUrl, casts, commentCount, createdAt, description, descriptionImageUrl, endAt, isArchivePublished, isArchiving, isDisabledComment, isEmbed, isLineartv, isPause, isPublished, lastViewCount, liveStreamUrl, liveType, originalId, paymentStatus, permalink, scheduledStartAt, scheduledEndAt, startAt, startTime, status, tags, thumbnailUrl, title, updatedAt, viewCount, channel, ByteString.EMPTY);
  }

  public FreshProgram(String id, Long airTime, String archiveStreamUrl, List<String> casts, Long commentCount, String createdAt, String description, String descriptionImageUrl, String endAt, Boolean isArchivePublished, Boolean isArchiving, Boolean isDisabledComment, Boolean isEmbed, Boolean isLineartv, Boolean isPause, Boolean isPublished, Long lastViewCount, String liveStreamUrl, String liveType, String originalId, String paymentStatus, String permalink, String scheduledStartAt, String scheduledEndAt, String startAt, Long startTime, String status, List<String> tags, String thumbnailUrl, String title, String updatedAt, Long viewCount, FreshChannel channel, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.airTime = airTime;
    this.archiveStreamUrl = archiveStreamUrl;
    this.casts = Internal.immutableCopyOf("casts", casts);
    this.commentCount = commentCount;
    this.createdAt = createdAt;
    this.description = description;
    this.descriptionImageUrl = descriptionImageUrl;
    this.endAt = endAt;
    this.isArchivePublished = isArchivePublished;
    this.isArchiving = isArchiving;
    this.isDisabledComment = isDisabledComment;
    this.isEmbed = isEmbed;
    this.isLineartv = isLineartv;
    this.isPause = isPause;
    this.isPublished = isPublished;
    this.lastViewCount = lastViewCount;
    this.liveStreamUrl = liveStreamUrl;
    this.liveType = liveType;
    this.originalId = originalId;
    this.paymentStatus = paymentStatus;
    this.permalink = permalink;
    this.scheduledStartAt = scheduledStartAt;
    this.scheduledEndAt = scheduledEndAt;
    this.startAt = startAt;
    this.startTime = startTime;
    this.status = status;
    this.tags = Internal.immutableCopyOf("tags", tags);
    this.thumbnailUrl = thumbnailUrl;
    this.title = title;
    this.updatedAt = updatedAt;
    this.viewCount = viewCount;
    this.channel = channel;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.airTime = airTime;
    builder.archiveStreamUrl = archiveStreamUrl;
    builder.casts = Internal.copyOf("casts", casts);
    builder.commentCount = commentCount;
    builder.createdAt = createdAt;
    builder.description = description;
    builder.descriptionImageUrl = descriptionImageUrl;
    builder.endAt = endAt;
    builder.isArchivePublished = isArchivePublished;
    builder.isArchiving = isArchiving;
    builder.isDisabledComment = isDisabledComment;
    builder.isEmbed = isEmbed;
    builder.isLineartv = isLineartv;
    builder.isPause = isPause;
    builder.isPublished = isPublished;
    builder.lastViewCount = lastViewCount;
    builder.liveStreamUrl = liveStreamUrl;
    builder.liveType = liveType;
    builder.originalId = originalId;
    builder.paymentStatus = paymentStatus;
    builder.permalink = permalink;
    builder.scheduledStartAt = scheduledStartAt;
    builder.scheduledEndAt = scheduledEndAt;
    builder.startAt = startAt;
    builder.startTime = startTime;
    builder.status = status;
    builder.tags = Internal.copyOf("tags", tags);
    builder.thumbnailUrl = thumbnailUrl;
    builder.title = title;
    builder.updatedAt = updatedAt;
    builder.viewCount = viewCount;
    builder.channel = channel;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FreshProgram)) return false;
    FreshProgram o = (FreshProgram) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(airTime, o.airTime)
        && Internal.equals(archiveStreamUrl, o.archiveStreamUrl)
        && Internal.equals(casts, o.casts)
        && Internal.equals(commentCount, o.commentCount)
        && Internal.equals(createdAt, o.createdAt)
        && Internal.equals(description, o.description)
        && Internal.equals(descriptionImageUrl, o.descriptionImageUrl)
        && Internal.equals(endAt, o.endAt)
        && Internal.equals(isArchivePublished, o.isArchivePublished)
        && Internal.equals(isArchiving, o.isArchiving)
        && Internal.equals(isDisabledComment, o.isDisabledComment)
        && Internal.equals(isEmbed, o.isEmbed)
        && Internal.equals(isLineartv, o.isLineartv)
        && Internal.equals(isPause, o.isPause)
        && Internal.equals(isPublished, o.isPublished)
        && Internal.equals(lastViewCount, o.lastViewCount)
        && Internal.equals(liveStreamUrl, o.liveStreamUrl)
        && Internal.equals(liveType, o.liveType)
        && Internal.equals(originalId, o.originalId)
        && Internal.equals(paymentStatus, o.paymentStatus)
        && Internal.equals(permalink, o.permalink)
        && Internal.equals(scheduledStartAt, o.scheduledStartAt)
        && Internal.equals(scheduledEndAt, o.scheduledEndAt)
        && Internal.equals(startAt, o.startAt)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(status, o.status)
        && Internal.equals(tags, o.tags)
        && Internal.equals(thumbnailUrl, o.thumbnailUrl)
        && Internal.equals(title, o.title)
        && Internal.equals(updatedAt, o.updatedAt)
        && Internal.equals(viewCount, o.viewCount)
        && Internal.equals(channel, o.channel);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (airTime != null ? airTime.hashCode() : 0);
      result = result * 37 + (archiveStreamUrl != null ? archiveStreamUrl.hashCode() : 0);
      result = result * 37 + (casts != null ? casts.hashCode() : 1);
      result = result * 37 + (commentCount != null ? commentCount.hashCode() : 0);
      result = result * 37 + (createdAt != null ? createdAt.hashCode() : 0);
      result = result * 37 + (description != null ? description.hashCode() : 0);
      result = result * 37 + (descriptionImageUrl != null ? descriptionImageUrl.hashCode() : 0);
      result = result * 37 + (endAt != null ? endAt.hashCode() : 0);
      result = result * 37 + (isArchivePublished != null ? isArchivePublished.hashCode() : 0);
      result = result * 37 + (isArchiving != null ? isArchiving.hashCode() : 0);
      result = result * 37 + (isDisabledComment != null ? isDisabledComment.hashCode() : 0);
      result = result * 37 + (isEmbed != null ? isEmbed.hashCode() : 0);
      result = result * 37 + (isLineartv != null ? isLineartv.hashCode() : 0);
      result = result * 37 + (isPause != null ? isPause.hashCode() : 0);
      result = result * 37 + (isPublished != null ? isPublished.hashCode() : 0);
      result = result * 37 + (lastViewCount != null ? lastViewCount.hashCode() : 0);
      result = result * 37 + (liveStreamUrl != null ? liveStreamUrl.hashCode() : 0);
      result = result * 37 + (liveType != null ? liveType.hashCode() : 0);
      result = result * 37 + (originalId != null ? originalId.hashCode() : 0);
      result = result * 37 + (paymentStatus != null ? paymentStatus.hashCode() : 0);
      result = result * 37 + (permalink != null ? permalink.hashCode() : 0);
      result = result * 37 + (scheduledStartAt != null ? scheduledStartAt.hashCode() : 0);
      result = result * 37 + (scheduledEndAt != null ? scheduledEndAt.hashCode() : 0);
      result = result * 37 + (startAt != null ? startAt.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (tags != null ? tags.hashCode() : 1);
      result = result * 37 + (thumbnailUrl != null ? thumbnailUrl.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (updatedAt != null ? updatedAt.hashCode() : 0);
      result = result * 37 + (viewCount != null ? viewCount.hashCode() : 0);
      result = result * 37 + (channel != null ? channel.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (airTime != null) builder.append(", airTime=").append(airTime);
    if (archiveStreamUrl != null) builder.append(", archiveStreamUrl=").append(archiveStreamUrl);
    if (casts != null) builder.append(", casts=").append(casts);
    if (commentCount != null) builder.append(", commentCount=").append(commentCount);
    if (createdAt != null) builder.append(", createdAt=").append(createdAt);
    if (description != null) builder.append(", description=").append(description);
    if (descriptionImageUrl != null) builder.append(", descriptionImageUrl=").append(descriptionImageUrl);
    if (endAt != null) builder.append(", endAt=").append(endAt);
    if (isArchivePublished != null) builder.append(", isArchivePublished=").append(isArchivePublished);
    if (isArchiving != null) builder.append(", isArchiving=").append(isArchiving);
    if (isDisabledComment != null) builder.append(", isDisabledComment=").append(isDisabledComment);
    if (isEmbed != null) builder.append(", isEmbed=").append(isEmbed);
    if (isLineartv != null) builder.append(", isLineartv=").append(isLineartv);
    if (isPause != null) builder.append(", isPause=").append(isPause);
    if (isPublished != null) builder.append(", isPublished=").append(isPublished);
    if (lastViewCount != null) builder.append(", lastViewCount=").append(lastViewCount);
    if (liveStreamUrl != null) builder.append(", liveStreamUrl=").append(liveStreamUrl);
    if (liveType != null) builder.append(", liveType=").append(liveType);
    if (originalId != null) builder.append(", originalId=").append(originalId);
    if (paymentStatus != null) builder.append(", paymentStatus=").append(paymentStatus);
    if (permalink != null) builder.append(", permalink=").append(permalink);
    if (scheduledStartAt != null) builder.append(", scheduledStartAt=").append(scheduledStartAt);
    if (scheduledEndAt != null) builder.append(", scheduledEndAt=").append(scheduledEndAt);
    if (startAt != null) builder.append(", startAt=").append(startAt);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (status != null) builder.append(", status=").append(status);
    if (tags != null) builder.append(", tags=").append(tags);
    if (thumbnailUrl != null) builder.append(", thumbnailUrl=").append(thumbnailUrl);
    if (title != null) builder.append(", title=").append(title);
    if (updatedAt != null) builder.append(", updatedAt=").append(updatedAt);
    if (viewCount != null) builder.append(", viewCount=").append(viewCount);
    if (channel != null) builder.append(", channel=").append(channel);
    return builder.replace(0, 2, "FreshProgram{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FreshProgram, Builder> {
    public String id;

    public Long airTime;

    public String archiveStreamUrl;

    public List<String> casts;

    public Long commentCount;

    public String createdAt;

    public String description;

    public String descriptionImageUrl;

    public String endAt;

    public Boolean isArchivePublished;

    public Boolean isArchiving;

    public Boolean isDisabledComment;

    public Boolean isEmbed;

    public Boolean isLineartv;

    public Boolean isPause;

    public Boolean isPublished;

    public Long lastViewCount;

    public String liveStreamUrl;

    public String liveType;

    public String originalId;

    public String paymentStatus;

    public String permalink;

    public String scheduledStartAt;

    public String scheduledEndAt;

    public String startAt;

    public Long startTime;

    public String status;

    public List<String> tags;

    public String thumbnailUrl;

    public String title;

    public String updatedAt;

    public Long viewCount;

    public FreshChannel channel;

    public Builder() {
      casts = Internal.newMutableList();
      tags = Internal.newMutableList();
    }

    /**
     * / 番組ID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / 放送時間
     */
    public Builder airTime(Long airTime) {
      this.airTime = airTime;
      return this;
    }

    /**
     * / アーカイブ用URL
     */
    public Builder archiveStreamUrl(String archiveStreamUrl) {
      this.archiveStreamUrl = archiveStreamUrl;
      return this;
    }

    /**
     * / キャスト一覧
     */
    public Builder casts(List<String> casts) {
      Internal.checkElementsNotNull(casts);
      this.casts = casts;
      return this;
    }

    /**
     * / コメント数
     */
    public Builder commentCount(Long commentCount) {
      this.commentCount = commentCount;
      return this;
    }

    /**
     * / 作成日時(ISO)
     */
    public Builder createdAt(String createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    /**
     * / 番組詳細
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * / 詳細画像URL
     */
    public Builder descriptionImageUrl(String descriptionImageUrl) {
      this.descriptionImageUrl = descriptionImageUrl;
      return this;
    }

    /**
     * / 終了日時
     */
    public Builder endAt(String endAt) {
      this.endAt = endAt;
      return this;
    }

    /**
     * / アーカイブ公開フラグ
     */
    public Builder isArchivePublished(Boolean isArchivePublished) {
      this.isArchivePublished = isArchivePublished;
      return this;
    }

    /**
     * / アーカイブ中フラグ
     */
    public Builder isArchiving(Boolean isArchiving) {
      this.isArchiving = isArchiving;
      return this;
    }

    /**
     * / コメント不可フラグ
     */
    public Builder isDisabledComment(Boolean isDisabledComment) {
      this.isDisabledComment = isDisabledComment;
      return this;
    }

    /**
     * / EMBED可否フラグ
     */
    public Builder isEmbed(Boolean isEmbed) {
      this.isEmbed = isEmbed;
      return this;
    }

    /**
     * / リニア放送フラグ
     */
    public Builder isLineartv(Boolean isLineartv) {
      this.isLineartv = isLineartv;
      return this;
    }

    /**
     * / 休止中フラグ
     */
    public Builder isPause(Boolean isPause) {
      this.isPause = isPause;
      return this;
    }

    /**
     * / 公開済みフラグ
     */
    public Builder isPublished(Boolean isPublished) {
      this.isPublished = isPublished;
      return this;
    }

    /**
     * / 前回放送の視聴数?
     */
    public Builder lastViewCount(Long lastViewCount) {
      this.lastViewCount = lastViewCount;
      return this;
    }

    /**
     * / ライブ再生用URL
     */
    public Builder liveStreamUrl(String liveStreamUrl) {
      this.liveStreamUrl = liveStreamUrl;
      return this;
    }

    /**
     * / ライブ種類 live, tempLive
     */
    public Builder liveType(String liveType) {
      this.liveType = liveType;
      return this;
    }

    /**
     * / オリジナルID?
     */
    public Builder originalId(String originalId) {
      this.originalId = originalId;
      return this;
    }

    /**
     * / 支払いステータス free
     */
    public Builder paymentStatus(String paymentStatus) {
      this.paymentStatus = paymentStatus;
      return this;
    }

    /**
     * / リンク先URL
     */
    public Builder permalink(String permalink) {
      this.permalink = permalink;
      return this;
    }

    /**
     * / 放送開始予定日時
     */
    public Builder scheduledStartAt(String scheduledStartAt) {
      this.scheduledStartAt = scheduledStartAt;
      return this;
    }

    /**
     * / 放送終了予定日時
     */
    public Builder scheduledEndAt(String scheduledEndAt) {
      this.scheduledEndAt = scheduledEndAt;
      return this;
    }

    /**
     * / 開始日時
     */
    public Builder startAt(String startAt) {
      this.startAt = startAt;
      return this;
    }

    /**
     * / 開始時間?
     */
    public Builder startTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * / ステータス onair=配信中, archive=アーカイブ完了, upcoming=配信前
     */
    public Builder status(String status) {
      this.status = status;
      return this;
    }

    /**
     * / タグ一覧
     */
    public Builder tags(List<String> tags) {
      Internal.checkElementsNotNull(tags);
      this.tags = tags;
      return this;
    }

    /**
     * / サムネイル画像URL
     */
    public Builder thumbnailUrl(String thumbnailUrl) {
      this.thumbnailUrl = thumbnailUrl;
      return this;
    }

    /**
     * / 番組名
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * / 更新日時
     */
    public Builder updatedAt(String updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    /**
     * / 視聴数
     */
    public Builder viewCount(Long viewCount) {
      this.viewCount = viewCount;
      return this;
    }

    public Builder channel(FreshChannel channel) {
      this.channel = channel;
      return this;
    }

    @Override
    public FreshProgram build() {
      return new FreshProgram(id, airTime, archiveStreamUrl, casts, commentCount, createdAt, description, descriptionImageUrl, endAt, isArchivePublished, isArchiving, isDisabledComment, isEmbed, isLineartv, isPause, isPublished, lastViewCount, liveStreamUrl, liveType, originalId, paymentStatus, permalink, scheduledStartAt, scheduledEndAt, startAt, startTime, status, tags, thumbnailUrl, title, updatedAt, viewCount, channel, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FreshProgram extends ProtoAdapter<FreshProgram> {
    ProtoAdapter_FreshProgram() {
      super(FieldEncoding.LENGTH_DELIMITED, FreshProgram.class);
    }

    @Override
    public int encodedSize(FreshProgram value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.airTime != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.airTime) : 0)
          + (value.archiveStreamUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.archiveStreamUrl) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.casts)
          + (value.commentCount != null ? ProtoAdapter.INT64.encodedSizeWithTag(5, value.commentCount) : 0)
          + (value.createdAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.createdAt) : 0)
          + (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.description) : 0)
          + (value.descriptionImageUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.descriptionImageUrl) : 0)
          + (value.endAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.endAt) : 0)
          + (value.isArchivePublished != null ? ProtoAdapter.BOOL.encodedSizeWithTag(10, value.isArchivePublished) : 0)
          + (value.isArchiving != null ? ProtoAdapter.BOOL.encodedSizeWithTag(11, value.isArchiving) : 0)
          + (value.isDisabledComment != null ? ProtoAdapter.BOOL.encodedSizeWithTag(12, value.isDisabledComment) : 0)
          + (value.isEmbed != null ? ProtoAdapter.BOOL.encodedSizeWithTag(13, value.isEmbed) : 0)
          + (value.isLineartv != null ? ProtoAdapter.BOOL.encodedSizeWithTag(14, value.isLineartv) : 0)
          + (value.isPause != null ? ProtoAdapter.BOOL.encodedSizeWithTag(15, value.isPause) : 0)
          + (value.isPublished != null ? ProtoAdapter.BOOL.encodedSizeWithTag(16, value.isPublished) : 0)
          + (value.lastViewCount != null ? ProtoAdapter.INT64.encodedSizeWithTag(17, value.lastViewCount) : 0)
          + (value.liveStreamUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.liveStreamUrl) : 0)
          + (value.liveType != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.liveType) : 0)
          + (value.originalId != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.originalId) : 0)
          + (value.paymentStatus != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.paymentStatus) : 0)
          + (value.permalink != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.permalink) : 0)
          + (value.scheduledStartAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.scheduledStartAt) : 0)
          + (value.scheduledEndAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.scheduledEndAt) : 0)
          + (value.startAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.startAt) : 0)
          + (value.startTime != null ? ProtoAdapter.INT64.encodedSizeWithTag(26, value.startTime) : 0)
          + (value.status != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.status) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(28, value.tags)
          + (value.thumbnailUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.thumbnailUrl) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(30, value.title) : 0)
          + (value.updatedAt != null ? ProtoAdapter.STRING.encodedSizeWithTag(31, value.updatedAt) : 0)
          + (value.viewCount != null ? ProtoAdapter.INT64.encodedSizeWithTag(32, value.viewCount) : 0)
          + (value.channel != null ? FreshChannel.ADAPTER.encodedSizeWithTag(50, value.channel) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FreshProgram value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.airTime != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.airTime);
      if (value.archiveStreamUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.archiveStreamUrl);
      if (value.casts != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.casts);
      if (value.commentCount != null) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.commentCount);
      if (value.createdAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.createdAt);
      if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.description);
      if (value.descriptionImageUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.descriptionImageUrl);
      if (value.endAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.endAt);
      if (value.isArchivePublished != null) ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.isArchivePublished);
      if (value.isArchiving != null) ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.isArchiving);
      if (value.isDisabledComment != null) ProtoAdapter.BOOL.encodeWithTag(writer, 12, value.isDisabledComment);
      if (value.isEmbed != null) ProtoAdapter.BOOL.encodeWithTag(writer, 13, value.isEmbed);
      if (value.isLineartv != null) ProtoAdapter.BOOL.encodeWithTag(writer, 14, value.isLineartv);
      if (value.isPause != null) ProtoAdapter.BOOL.encodeWithTag(writer, 15, value.isPause);
      if (value.isPublished != null) ProtoAdapter.BOOL.encodeWithTag(writer, 16, value.isPublished);
      if (value.lastViewCount != null) ProtoAdapter.INT64.encodeWithTag(writer, 17, value.lastViewCount);
      if (value.liveStreamUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.liveStreamUrl);
      if (value.liveType != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.liveType);
      if (value.originalId != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.originalId);
      if (value.paymentStatus != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.paymentStatus);
      if (value.permalink != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.permalink);
      if (value.scheduledStartAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.scheduledStartAt);
      if (value.scheduledEndAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.scheduledEndAt);
      if (value.startAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.startAt);
      if (value.startTime != null) ProtoAdapter.INT64.encodeWithTag(writer, 26, value.startTime);
      if (value.status != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.status);
      if (value.tags != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 28, value.tags);
      if (value.thumbnailUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.thumbnailUrl);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 30, value.title);
      if (value.updatedAt != null) ProtoAdapter.STRING.encodeWithTag(writer, 31, value.updatedAt);
      if (value.viewCount != null) ProtoAdapter.INT64.encodeWithTag(writer, 32, value.viewCount);
      if (value.channel != null) FreshChannel.ADAPTER.encodeWithTag(writer, 50, value.channel);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FreshProgram decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.airTime(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.archiveStreamUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.casts.add(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.commentCount(ProtoAdapter.INT64.decode(reader)); break;
          case 6: builder.createdAt(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.description(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.descriptionImageUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.endAt(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.isArchivePublished(ProtoAdapter.BOOL.decode(reader)); break;
          case 11: builder.isArchiving(ProtoAdapter.BOOL.decode(reader)); break;
          case 12: builder.isDisabledComment(ProtoAdapter.BOOL.decode(reader)); break;
          case 13: builder.isEmbed(ProtoAdapter.BOOL.decode(reader)); break;
          case 14: builder.isLineartv(ProtoAdapter.BOOL.decode(reader)); break;
          case 15: builder.isPause(ProtoAdapter.BOOL.decode(reader)); break;
          case 16: builder.isPublished(ProtoAdapter.BOOL.decode(reader)); break;
          case 17: builder.lastViewCount(ProtoAdapter.INT64.decode(reader)); break;
          case 18: builder.liveStreamUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.liveType(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.originalId(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.paymentStatus(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.permalink(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.scheduledStartAt(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.scheduledEndAt(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.startAt(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.startTime(ProtoAdapter.INT64.decode(reader)); break;
          case 27: builder.status(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.tags.add(ProtoAdapter.STRING.decode(reader)); break;
          case 29: builder.thumbnailUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 30: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 31: builder.updatedAt(ProtoAdapter.STRING.decode(reader)); break;
          case 32: builder.viewCount(ProtoAdapter.INT64.decode(reader)); break;
          case 50: builder.channel(FreshChannel.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FreshProgram redact(FreshProgram value) {
      Builder builder = value.newBuilder();
      if (builder.channel != null) builder.channel = FreshChannel.ADAPTER.redact(builder.channel);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
