// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/user.proto at 23:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Represents authentication type of twitter
 */
public final class Twitter extends Message<Twitter, Twitter.Builder> {
  public static final ProtoAdapter<Twitter> ADAPTER = new ProtoAdapter_Twitter();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TWITTERUSERID = "";

  public static final String DEFAULT_ACCESSTOKEN = "";

  public static final String DEFAULT_ACCESSTOKENSECRET = "";

  public static final String DEFAULT_DISPLAYNAME = "";

  public static final String DEFAULT_USERNAME = "";

  public static final String DEFAULT_PROFILEIMAGEURL = "";

  public static final Long DEFAULT_CONNECTEDAT = 0L;

  /**
   * / User ID of Twitter
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String twitterUserId;

  /**
   * / Access token of Twitter
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String accessToken;

  /**
   * / Access token secret of Twitter
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String accessTokenSecret;

  /**
   * / Display name of Twitter (e.g. AbemaTV)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String displayName;

  /**
   * / User name of Twitter (e.g. @abematv)
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String username;

  /**
   * / Profile image URL of Twitter
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String profileImageUrl;

  /**
   * / Connected at (unix time)
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long connectedAt;

  public Twitter(String twitterUserId, String accessToken, String accessTokenSecret, String displayName, String username, String profileImageUrl, Long connectedAt) {
    this(twitterUserId, accessToken, accessTokenSecret, displayName, username, profileImageUrl, connectedAt, ByteString.EMPTY);
  }

  public Twitter(String twitterUserId, String accessToken, String accessTokenSecret, String displayName, String username, String profileImageUrl, Long connectedAt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.twitterUserId = twitterUserId;
    this.accessToken = accessToken;
    this.accessTokenSecret = accessTokenSecret;
    this.displayName = displayName;
    this.username = username;
    this.profileImageUrl = profileImageUrl;
    this.connectedAt = connectedAt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.twitterUserId = twitterUserId;
    builder.accessToken = accessToken;
    builder.accessTokenSecret = accessTokenSecret;
    builder.displayName = displayName;
    builder.username = username;
    builder.profileImageUrl = profileImageUrl;
    builder.connectedAt = connectedAt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Twitter)) return false;
    Twitter o = (Twitter) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(twitterUserId, o.twitterUserId)
        && Internal.equals(accessToken, o.accessToken)
        && Internal.equals(accessTokenSecret, o.accessTokenSecret)
        && Internal.equals(displayName, o.displayName)
        && Internal.equals(username, o.username)
        && Internal.equals(profileImageUrl, o.profileImageUrl)
        && Internal.equals(connectedAt, o.connectedAt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (twitterUserId != null ? twitterUserId.hashCode() : 0);
      result = result * 37 + (accessToken != null ? accessToken.hashCode() : 0);
      result = result * 37 + (accessTokenSecret != null ? accessTokenSecret.hashCode() : 0);
      result = result * 37 + (displayName != null ? displayName.hashCode() : 0);
      result = result * 37 + (username != null ? username.hashCode() : 0);
      result = result * 37 + (profileImageUrl != null ? profileImageUrl.hashCode() : 0);
      result = result * 37 + (connectedAt != null ? connectedAt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (twitterUserId != null) builder.append(", twitterUserId=").append(twitterUserId);
    if (accessToken != null) builder.append(", accessToken=").append(accessToken);
    if (accessTokenSecret != null) builder.append(", accessTokenSecret=").append(accessTokenSecret);
    if (displayName != null) builder.append(", displayName=").append(displayName);
    if (username != null) builder.append(", username=").append(username);
    if (profileImageUrl != null) builder.append(", profileImageUrl=").append(profileImageUrl);
    if (connectedAt != null) builder.append(", connectedAt=").append(connectedAt);
    return builder.replace(0, 2, "Twitter{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Twitter, Builder> {
    public String twitterUserId;

    public String accessToken;

    public String accessTokenSecret;

    public String displayName;

    public String username;

    public String profileImageUrl;

    public Long connectedAt;

    public Builder() {
    }

    /**
     * / User ID of Twitter
     */
    public Builder twitterUserId(String twitterUserId) {
      this.twitterUserId = twitterUserId;
      return this;
    }

    /**
     * / Access token of Twitter
     */
    public Builder accessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    /**
     * / Access token secret of Twitter
     */
    public Builder accessTokenSecret(String accessTokenSecret) {
      this.accessTokenSecret = accessTokenSecret;
      return this;
    }

    /**
     * / Display name of Twitter (e.g. AbemaTV)
     */
    public Builder displayName(String displayName) {
      this.displayName = displayName;
      return this;
    }

    /**
     * / User name of Twitter (e.g. @abematv)
     */
    public Builder username(String username) {
      this.username = username;
      return this;
    }

    /**
     * / Profile image URL of Twitter
     */
    public Builder profileImageUrl(String profileImageUrl) {
      this.profileImageUrl = profileImageUrl;
      return this;
    }

    /**
     * / Connected at (unix time)
     */
    public Builder connectedAt(Long connectedAt) {
      this.connectedAt = connectedAt;
      return this;
    }

    @Override
    public Twitter build() {
      return new Twitter(twitterUserId, accessToken, accessTokenSecret, displayName, username, profileImageUrl, connectedAt, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Twitter extends ProtoAdapter<Twitter> {
    ProtoAdapter_Twitter() {
      super(FieldEncoding.LENGTH_DELIMITED, Twitter.class);
    }

    @Override
    public int encodedSize(Twitter value) {
      return (value.twitterUserId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.twitterUserId) : 0)
          + (value.accessToken != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.accessToken) : 0)
          + (value.accessTokenSecret != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.accessTokenSecret) : 0)
          + (value.displayName != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.displayName) : 0)
          + (value.username != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.username) : 0)
          + (value.profileImageUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.profileImageUrl) : 0)
          + (value.connectedAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(7, value.connectedAt) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Twitter value) throws IOException {
      if (value.twitterUserId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.twitterUserId);
      if (value.accessToken != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.accessToken);
      if (value.accessTokenSecret != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.accessTokenSecret);
      if (value.displayName != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.displayName);
      if (value.username != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.username);
      if (value.profileImageUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.profileImageUrl);
      if (value.connectedAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.connectedAt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Twitter decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.twitterUserId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.accessToken(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.accessTokenSecret(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.displayName(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.username(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.profileImageUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.connectedAt(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Twitter redact(Twitter value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
