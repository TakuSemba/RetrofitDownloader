// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/video.proto at 71:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / ビデオシリーズ
 */
public final class VideoSeries extends Message<VideoSeries, VideoSeries.Builder> {
  public static final ProtoAdapter<VideoSeries> ADAPTER = new ProtoAdapter_VideoSeries();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_CONTENT = "";

  public static final String DEFAULT_VERSION = "";

  public static final Long DEFAULT_IMAGEUPDATEDAT = 0L;

  public static final String DEFAULT_CAPTION = "";

  public static final String DEFAULT_PROGRAMORDER = "";

  /**
   * / シリーズID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / ジャンル
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.VideoGenre#ADAPTER"
  )
  public final VideoGenre genre;

  /**
   * / タイトル
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * / コンテンツ
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  /**
   * / シーズン一覧
   */
  @WireField(
      tag = 6,
      adapter = "tv.abema.protos.VideoSeason#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VideoSeason> seasons;

  /**
   * / 代表番組のコピーライト一覧
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> copyrights;

  /**
   * / ラベル情報
   */
  @WireField(
      tag = 8,
      adapter = "tv.abema.protos.VideoSeriesLabel#ADAPTER"
  )
  public final VideoSeriesLabel label;

  /**
   * / バージョン
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String version;

  /**
   * / 画像更新時刻
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long imageUpdatedAt;

  /**
   * / 見出し
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String caption;

  /**
   * / デフォルトの並び順
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String programOrder;

  /**
   * / シリーズの共有リンク
   */
  @WireField(
      tag = 13,
      adapter = "tv.abema.protos.VideoSeriesSharedLink#ADAPTER"
  )
  public final VideoSeriesSharedLink sharedLink;

  public VideoSeries(String id, VideoGenre genre, String title, String content, List<VideoSeason> seasons, List<String> copyrights, VideoSeriesLabel label, String version, Long imageUpdatedAt, String caption, String programOrder, VideoSeriesSharedLink sharedLink) {
    this(id, genre, title, content, seasons, copyrights, label, version, imageUpdatedAt, caption, programOrder, sharedLink, ByteString.EMPTY);
  }

  public VideoSeries(String id, VideoGenre genre, String title, String content, List<VideoSeason> seasons, List<String> copyrights, VideoSeriesLabel label, String version, Long imageUpdatedAt, String caption, String programOrder, VideoSeriesSharedLink sharedLink, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.genre = genre;
    this.title = title;
    this.content = content;
    this.seasons = Internal.immutableCopyOf("seasons", seasons);
    this.copyrights = Internal.immutableCopyOf("copyrights", copyrights);
    this.label = label;
    this.version = version;
    this.imageUpdatedAt = imageUpdatedAt;
    this.caption = caption;
    this.programOrder = programOrder;
    this.sharedLink = sharedLink;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.genre = genre;
    builder.title = title;
    builder.content = content;
    builder.seasons = Internal.copyOf("seasons", seasons);
    builder.copyrights = Internal.copyOf("copyrights", copyrights);
    builder.label = label;
    builder.version = version;
    builder.imageUpdatedAt = imageUpdatedAt;
    builder.caption = caption;
    builder.programOrder = programOrder;
    builder.sharedLink = sharedLink;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VideoSeries)) return false;
    VideoSeries o = (VideoSeries) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(genre, o.genre)
        && Internal.equals(title, o.title)
        && Internal.equals(content, o.content)
        && Internal.equals(seasons, o.seasons)
        && Internal.equals(copyrights, o.copyrights)
        && Internal.equals(label, o.label)
        && Internal.equals(version, o.version)
        && Internal.equals(imageUpdatedAt, o.imageUpdatedAt)
        && Internal.equals(caption, o.caption)
        && Internal.equals(programOrder, o.programOrder)
        && Internal.equals(sharedLink, o.sharedLink);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (genre != null ? genre.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (seasons != null ? seasons.hashCode() : 1);
      result = result * 37 + (copyrights != null ? copyrights.hashCode() : 1);
      result = result * 37 + (label != null ? label.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (imageUpdatedAt != null ? imageUpdatedAt.hashCode() : 0);
      result = result * 37 + (caption != null ? caption.hashCode() : 0);
      result = result * 37 + (programOrder != null ? programOrder.hashCode() : 0);
      result = result * 37 + (sharedLink != null ? sharedLink.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (genre != null) builder.append(", genre=").append(genre);
    if (title != null) builder.append(", title=").append(title);
    if (content != null) builder.append(", content=").append(content);
    if (seasons != null) builder.append(", seasons=").append(seasons);
    if (copyrights != null) builder.append(", copyrights=").append(copyrights);
    if (label != null) builder.append(", label=").append(label);
    if (version != null) builder.append(", version=").append(version);
    if (imageUpdatedAt != null) builder.append(", imageUpdatedAt=").append(imageUpdatedAt);
    if (caption != null) builder.append(", caption=").append(caption);
    if (programOrder != null) builder.append(", programOrder=").append(programOrder);
    if (sharedLink != null) builder.append(", sharedLink=").append(sharedLink);
    return builder.replace(0, 2, "VideoSeries{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<VideoSeries, Builder> {
    public String id;

    public VideoGenre genre;

    public String title;

    public String content;

    public List<VideoSeason> seasons;

    public List<String> copyrights;

    public VideoSeriesLabel label;

    public String version;

    public Long imageUpdatedAt;

    public String caption;

    public String programOrder;

    public VideoSeriesSharedLink sharedLink;

    public Builder() {
      seasons = Internal.newMutableList();
      copyrights = Internal.newMutableList();
    }

    /**
     * / シリーズID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / ジャンル
     */
    public Builder genre(VideoGenre genre) {
      this.genre = genre;
      return this;
    }

    /**
     * / タイトル
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * / コンテンツ
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    /**
     * / シーズン一覧
     */
    public Builder seasons(List<VideoSeason> seasons) {
      Internal.checkElementsNotNull(seasons);
      this.seasons = seasons;
      return this;
    }

    /**
     * / 代表番組のコピーライト一覧
     */
    public Builder copyrights(List<String> copyrights) {
      Internal.checkElementsNotNull(copyrights);
      this.copyrights = copyrights;
      return this;
    }

    /**
     * / ラベル情報
     */
    public Builder label(VideoSeriesLabel label) {
      this.label = label;
      return this;
    }

    /**
     * / バージョン
     */
    public Builder version(String version) {
      this.version = version;
      return this;
    }

    /**
     * / 画像更新時刻
     */
    public Builder imageUpdatedAt(Long imageUpdatedAt) {
      this.imageUpdatedAt = imageUpdatedAt;
      return this;
    }

    /**
     * / 見出し
     */
    public Builder caption(String caption) {
      this.caption = caption;
      return this;
    }

    /**
     * / デフォルトの並び順
     */
    public Builder programOrder(String programOrder) {
      this.programOrder = programOrder;
      return this;
    }

    /**
     * / シリーズの共有リンク
     */
    public Builder sharedLink(VideoSeriesSharedLink sharedLink) {
      this.sharedLink = sharedLink;
      return this;
    }

    @Override
    public VideoSeries build() {
      return new VideoSeries(id, genre, title, content, seasons, copyrights, label, version, imageUpdatedAt, caption, programOrder, sharedLink, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VideoSeries extends ProtoAdapter<VideoSeries> {
    ProtoAdapter_VideoSeries() {
      super(FieldEncoding.LENGTH_DELIMITED, VideoSeries.class);
    }

    @Override
    public int encodedSize(VideoSeries value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.genre != null ? VideoGenre.ADAPTER.encodedSizeWithTag(2, value.genre) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.title) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.content) : 0)
          + VideoSeason.ADAPTER.asRepeated().encodedSizeWithTag(6, value.seasons)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(7, value.copyrights)
          + (value.label != null ? VideoSeriesLabel.ADAPTER.encodedSizeWithTag(8, value.label) : 0)
          + (value.version != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.version) : 0)
          + (value.imageUpdatedAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(10, value.imageUpdatedAt) : 0)
          + (value.caption != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.caption) : 0)
          + (value.programOrder != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.programOrder) : 0)
          + (value.sharedLink != null ? VideoSeriesSharedLink.ADAPTER.encodedSizeWithTag(13, value.sharedLink) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VideoSeries value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.genre != null) VideoGenre.ADAPTER.encodeWithTag(writer, 2, value.genre);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.title);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.content);
      if (value.seasons != null) VideoSeason.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.seasons);
      if (value.copyrights != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 7, value.copyrights);
      if (value.label != null) VideoSeriesLabel.ADAPTER.encodeWithTag(writer, 8, value.label);
      if (value.version != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.version);
      if (value.imageUpdatedAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 10, value.imageUpdatedAt);
      if (value.caption != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.caption);
      if (value.programOrder != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.programOrder);
      if (value.sharedLink != null) VideoSeriesSharedLink.ADAPTER.encodeWithTag(writer, 13, value.sharedLink);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VideoSeries decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.genre(VideoGenre.ADAPTER.decode(reader)); break;
          case 4: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.seasons.add(VideoSeason.ADAPTER.decode(reader)); break;
          case 7: builder.copyrights.add(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.label(VideoSeriesLabel.ADAPTER.decode(reader)); break;
          case 9: builder.version(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.imageUpdatedAt(ProtoAdapter.INT64.decode(reader)); break;
          case 11: builder.caption(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.programOrder(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.sharedLink(VideoSeriesSharedLink.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VideoSeries redact(VideoSeries value) {
      Builder builder = value.newBuilder();
      if (builder.genre != null) builder.genre = VideoGenre.ADAPTER.redact(builder.genre);
      Internal.redactElements(builder.seasons, VideoSeason.ADAPTER);
      if (builder.label != null) builder.label = VideoSeriesLabel.ADAPTER.redact(builder.label);
      if (builder.sharedLink != null) builder.sharedLink = VideoSeriesSharedLink.ADAPTER.redact(builder.sharedLink);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
