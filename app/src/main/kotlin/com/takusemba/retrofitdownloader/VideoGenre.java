// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/video.proto at 113:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / ビデオジャンル
 */
public final class VideoGenre extends Message<VideoGenre, VideoGenre.Builder> {
  public static final ProtoAdapter<VideoGenre> ADAPTER = new ProtoAdapter_VideoGenre();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_NAME = "";

  /**
   * / ジャンルID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / ジャンル表記
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * / サブジャンル一覧
   */
  @WireField(
      tag = 3,
      adapter = "tv.abema.protos.VideoSubGenre#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VideoSubGenre> subGenres;

  public VideoGenre(String id, String name, List<VideoSubGenre> subGenres) {
    this(id, name, subGenres, ByteString.EMPTY);
  }

  public VideoGenre(String id, String name, List<VideoSubGenre> subGenres, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.subGenres = Internal.immutableCopyOf("subGenres", subGenres);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.subGenres = Internal.copyOf("subGenres", subGenres);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof VideoGenre)) return false;
    VideoGenre o = (VideoGenre) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(subGenres, o.subGenres);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (subGenres != null ? subGenres.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (subGenres != null) builder.append(", subGenres=").append(subGenres);
    return builder.replace(0, 2, "VideoGenre{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<VideoGenre, Builder> {
    public String id;

    public String name;

    public List<VideoSubGenre> subGenres;

    public Builder() {
      subGenres = Internal.newMutableList();
    }

    /**
     * / ジャンルID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / ジャンル表記
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * / サブジャンル一覧
     */
    public Builder subGenres(List<VideoSubGenre> subGenres) {
      Internal.checkElementsNotNull(subGenres);
      this.subGenres = subGenres;
      return this;
    }

    @Override
    public VideoGenre build() {
      return new VideoGenre(id, name, subGenres, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_VideoGenre extends ProtoAdapter<VideoGenre> {
    ProtoAdapter_VideoGenre() {
      super(FieldEncoding.LENGTH_DELIMITED, VideoGenre.class);
    }

    @Override
    public int encodedSize(VideoGenre value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + VideoSubGenre.ADAPTER.asRepeated().encodedSizeWithTag(3, value.subGenres)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, VideoGenre value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.subGenres != null) VideoSubGenre.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.subGenres);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public VideoGenre decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.subGenres.add(VideoSubGenre.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public VideoGenre redact(VideoGenre value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.subGenres, VideoSubGenre.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
