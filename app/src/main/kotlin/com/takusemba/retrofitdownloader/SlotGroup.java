// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/media.proto at 182:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / 放送枠グループ情報
 */
public final class SlotGroup extends Message<SlotGroup, SlotGroup.Builder> {
  public static final ProtoAdapter<SlotGroup> ADAPTER = new ProtoAdapter_SlotGroup();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_LASTSLOTID = "";

  public static final Boolean DEFAULT_FIXED = false;

  /**
   * / 放送枠グループID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / 放送枠グループ名
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * / グループに属する最後の放送枠ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String lastSlotId;

  /**
   * / FIXされているかどうか
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean fixed;

  public SlotGroup(String id, String name, String lastSlotId, Boolean fixed) {
    this(id, name, lastSlotId, fixed, ByteString.EMPTY);
  }

  public SlotGroup(String id, String name, String lastSlotId, Boolean fixed, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.lastSlotId = lastSlotId;
    this.fixed = fixed;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.lastSlotId = lastSlotId;
    builder.fixed = fixed;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SlotGroup)) return false;
    SlotGroup o = (SlotGroup) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(lastSlotId, o.lastSlotId)
        && Internal.equals(fixed, o.fixed);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (lastSlotId != null ? lastSlotId.hashCode() : 0);
      result = result * 37 + (fixed != null ? fixed.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (lastSlotId != null) builder.append(", lastSlotId=").append(lastSlotId);
    if (fixed != null) builder.append(", fixed=").append(fixed);
    return builder.replace(0, 2, "SlotGroup{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SlotGroup, Builder> {
    public String id;

    public String name;

    public String lastSlotId;

    public Boolean fixed;

    public Builder() {
    }

    /**
     * / 放送枠グループID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / 放送枠グループ名
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * / グループに属する最後の放送枠ID
     */
    public Builder lastSlotId(String lastSlotId) {
      this.lastSlotId = lastSlotId;
      return this;
    }

    /**
     * / FIXされているかどうか
     */
    public Builder fixed(Boolean fixed) {
      this.fixed = fixed;
      return this;
    }

    @Override
    public SlotGroup build() {
      return new SlotGroup(id, name, lastSlotId, fixed, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SlotGroup extends ProtoAdapter<SlotGroup> {
    ProtoAdapter_SlotGroup() {
      super(FieldEncoding.LENGTH_DELIMITED, SlotGroup.class);
    }

    @Override
    public int encodedSize(SlotGroup value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + (value.lastSlotId != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.lastSlotId) : 0)
          + (value.fixed != null ? ProtoAdapter.BOOL.encodedSizeWithTag(4, value.fixed) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SlotGroup value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.lastSlotId != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.lastSlotId);
      if (value.fixed != null) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.fixed);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SlotGroup decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.lastSlotId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.fixed(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SlotGroup redact(SlotGroup value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
