// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/sync.proto at 19:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / GetSyncChunkOfFavoriteSlotsResponse represents a response of getting sync chunk.
 */
public final class GetSyncChunkOfFavoriteSlotsResponse extends Message<GetSyncChunkOfFavoriteSlotsResponse, GetSyncChunkOfFavoriteSlotsResponse.Builder> {
  public static final ProtoAdapter<GetSyncChunkOfFavoriteSlotsResponse> ADAPTER = new ProtoAdapter_GetSyncChunkOfFavoriteSlotsResponse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_CHUNKHIGHUSN = 0L;

  /**
   * / Sync chunk of favorite slots.
   */
  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.FavoriteSlot#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<FavoriteSlot> slots;

  /**
   * / The highest usn that points to the end of the range of result.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long chunkHighUsn;

  /**
   * / Data set
   */
  @WireField(
      tag = 10,
      adapter = "tv.abema.protos.DataSet#ADAPTER"
  )
  public final DataSet dataSet;

  public GetSyncChunkOfFavoriteSlotsResponse(List<FavoriteSlot> slots, Long chunkHighUsn, DataSet dataSet) {
    this(slots, chunkHighUsn, dataSet, ByteString.EMPTY);
  }

  public GetSyncChunkOfFavoriteSlotsResponse(List<FavoriteSlot> slots, Long chunkHighUsn, DataSet dataSet, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.slots = Internal.immutableCopyOf("slots", slots);
    this.chunkHighUsn = chunkHighUsn;
    this.dataSet = dataSet;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.slots = Internal.copyOf("slots", slots);
    builder.chunkHighUsn = chunkHighUsn;
    builder.dataSet = dataSet;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetSyncChunkOfFavoriteSlotsResponse)) return false;
    GetSyncChunkOfFavoriteSlotsResponse o = (GetSyncChunkOfFavoriteSlotsResponse) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(slots, o.slots)
        && Internal.equals(chunkHighUsn, o.chunkHighUsn)
        && Internal.equals(dataSet, o.dataSet);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (slots != null ? slots.hashCode() : 1);
      result = result * 37 + (chunkHighUsn != null ? chunkHighUsn.hashCode() : 0);
      result = result * 37 + (dataSet != null ? dataSet.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (slots != null) builder.append(", slots=").append(slots);
    if (chunkHighUsn != null) builder.append(", chunkHighUsn=").append(chunkHighUsn);
    if (dataSet != null) builder.append(", dataSet=").append(dataSet);
    return builder.replace(0, 2, "GetSyncChunkOfFavoriteSlotsResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetSyncChunkOfFavoriteSlotsResponse, Builder> {
    public List<FavoriteSlot> slots;

    public Long chunkHighUsn;

    public DataSet dataSet;

    public Builder() {
      slots = Internal.newMutableList();
    }

    /**
     * / Sync chunk of favorite slots.
     */
    public Builder slots(List<FavoriteSlot> slots) {
      Internal.checkElementsNotNull(slots);
      this.slots = slots;
      return this;
    }

    /**
     * / The highest usn that points to the end of the range of result.
     */
    public Builder chunkHighUsn(Long chunkHighUsn) {
      this.chunkHighUsn = chunkHighUsn;
      return this;
    }

    /**
     * / Data set
     */
    public Builder dataSet(DataSet dataSet) {
      this.dataSet = dataSet;
      return this;
    }

    @Override
    public GetSyncChunkOfFavoriteSlotsResponse build() {
      return new GetSyncChunkOfFavoriteSlotsResponse(slots, chunkHighUsn, dataSet, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetSyncChunkOfFavoriteSlotsResponse extends ProtoAdapter<GetSyncChunkOfFavoriteSlotsResponse> {
    ProtoAdapter_GetSyncChunkOfFavoriteSlotsResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, GetSyncChunkOfFavoriteSlotsResponse.class);
    }

    @Override
    public int encodedSize(GetSyncChunkOfFavoriteSlotsResponse value) {
      return FavoriteSlot.ADAPTER.asRepeated().encodedSizeWithTag(1, value.slots)
          + (value.chunkHighUsn != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.chunkHighUsn) : 0)
          + (value.dataSet != null ? DataSet.ADAPTER.encodedSizeWithTag(10, value.dataSet) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetSyncChunkOfFavoriteSlotsResponse value) throws IOException {
      if (value.slots != null) FavoriteSlot.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.slots);
      if (value.chunkHighUsn != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.chunkHighUsn);
      if (value.dataSet != null) DataSet.ADAPTER.encodeWithTag(writer, 10, value.dataSet);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetSyncChunkOfFavoriteSlotsResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.slots.add(FavoriteSlot.ADAPTER.decode(reader)); break;
          case 2: builder.chunkHighUsn(ProtoAdapter.INT64.decode(reader)); break;
          case 10: builder.dataSet(DataSet.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetSyncChunkOfFavoriteSlotsResponse redact(GetSyncChunkOfFavoriteSlotsResponse value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.slots, FavoriteSlot.ADAPTER);
      if (builder.dataSet != null) builder.dataSet = DataSet.ADAPTER.redact(builder.dataSet);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
