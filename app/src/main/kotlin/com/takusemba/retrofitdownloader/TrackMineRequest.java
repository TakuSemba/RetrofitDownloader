// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/track.proto at 14:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * enumをsnake_caseで定義している理由
 * String()メソッドの返り値が、protoで定義しているpropatyの文字列になるので、コード量が減る為です。
 */
public final class TrackMineRequest extends Message<TrackMineRequest, TrackMineRequest.Builder> {
  public static final ProtoAdapter<TrackMineRequest> ADAPTER = new ProtoAdapter_TrackMineRequest();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.Mine#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Mine> logs;

  public TrackMineRequest(List<Mine> logs) {
    this(logs, ByteString.EMPTY);
  }

  public TrackMineRequest(List<Mine> logs, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.logs = Internal.immutableCopyOf("logs", logs);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.logs = Internal.copyOf("logs", logs);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TrackMineRequest)) return false;
    TrackMineRequest o = (TrackMineRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(logs, o.logs);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (logs != null ? logs.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (logs != null) builder.append(", logs=").append(logs);
    return builder.replace(0, 2, "TrackMineRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<TrackMineRequest, Builder> {
    public List<Mine> logs;

    public Builder() {
      logs = Internal.newMutableList();
    }

    public Builder logs(List<Mine> logs) {
      Internal.checkElementsNotNull(logs);
      this.logs = logs;
      return this;
    }

    @Override
    public TrackMineRequest build() {
      return new TrackMineRequest(logs, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_TrackMineRequest extends ProtoAdapter<TrackMineRequest> {
    ProtoAdapter_TrackMineRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, TrackMineRequest.class);
    }

    @Override
    public int encodedSize(TrackMineRequest value) {
      return Mine.ADAPTER.asRepeated().encodedSizeWithTag(1, value.logs)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, TrackMineRequest value) throws IOException {
      if (value.logs != null) Mine.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.logs);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public TrackMineRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.logs.add(Mine.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public TrackMineRequest redact(TrackMineRequest value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.logs, Mine.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
