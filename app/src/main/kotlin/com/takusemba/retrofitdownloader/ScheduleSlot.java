// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/media.proto at 92:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / 番組枠情報（番組情報がネストで含まれる）
 */
public final class ScheduleSlot extends Message<ScheduleSlot, ScheduleSlot.Builder> {
  public static final ProtoAdapter<ScheduleSlot> ADAPTER = new ProtoAdapter_ScheduleSlot();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_TITLE = "";

  public static final Long DEFAULT_STARTAT = 0L;

  public static final Long DEFAULT_ENDAT = 0L;

  public static final Long DEFAULT_TABLESTARTAT = 0L;

  public static final Long DEFAULT_TABLEENDAT = 0L;

  public static final String DEFAULT_HIGHLIGHT = "";

  public static final String DEFAULT_TABLEHIGHLIGHT = "";

  public static final String DEFAULT_DETAILHIGHLIGHT = "";

  public static final String DEFAULT_CONTENT = "";

  public static final String DEFAULT_DISPLAYPROGRAMID = "";

  public static final String DEFAULT_CHANNELID = "";

  public static final Long DEFAULT_TIMESHIFTENDAT = 0L;

  public static final String DEFAULT_HASHTAG = "";

  public static final Long DEFAULT_TIMESHIFTFREEENDAT = 0L;

  public static final Boolean DEFAULT_RESERVABLE = false;

  /**
   * / 番組枠ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / 放送枠タイトル
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  /**
   * / 開始時刻
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long startAt;

  /**
   * / 終了時刻
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long endAt;

  /**
   * / 放送番組
   */
  @WireField(
      tag = 5,
      adapter = "tv.abema.protos.ScheduleProgram#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ScheduleProgram> programs;

  /**
   * / 番組表上の開始時間
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long tableStartAt;

  /**
   * / 番組表上の終了時間
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long tableEndAt;

  /**
   * / フィードスーパー
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String highlight;

  /**
   * / 番組表みどころ
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tableHighlight;

  /**
   * / 番組詳細みどころ
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String detailHighlight;

  /**
   * / 詳細情報
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  /**
   * / 複数コンテンツ時の代表ID
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String displayProgramId;

  /**
   * / マーク
   */
  @WireField(
      tag = 13,
      adapter = "tv.abema.protos.SlotMark#ADAPTER"
  )
  public final SlotMark mark;

  /**
   * / フラグ
   */
  @WireField(
      tag = 14,
      adapter = "tv.abema.protos.SlotFlags#ADAPTER"
  )
  public final SlotFlags flags;

  /**
   * / 放送されるチャンネルID
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String channelId;

  /**
   * / タイムシフト可能最終日時
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long timeshiftEndAt;

  /**
   * delete groupId = 17;
   * / 放送枠グループ
   */
  @WireField(
      tag = 18,
      adapter = "tv.abema.protos.SlotGroup#ADAPTER"
  )
  public final SlotGroup slotGroup;

  /**
   * / twitterハッシュタグ
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hashtag;

  /**
   * / 拡張リンク
   */
  @WireField(
      tag = 20,
      adapter = "tv.abema.protos.ExtendedLink#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ExtendedLink> links;

  /**
   * / タイムシフト無料可能最終日時
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long timeshiftFreeEndAt;

  /**
   * / 共有リンク
   */
  @WireField(
      tag = 22,
      adapter = "tv.abema.protos.SlotSharedLink#ADAPTER"
  )
  public final SlotSharedLink sharedLink;

  /**
   * / 放送枠の再生情報
   */
  @WireField(
      tag = 23,
      adapter = "tv.abema.protos.SlotPlayback#ADAPTER"
  )
  public final SlotPlayback playback;

  /**
   * / 外部コンテンツ情報
   */
  @WireField(
      tag = 24,
      adapter = "tv.abema.protos.ExternalContent#ADAPTER"
  )
  public final ExternalContent externalContent;

  /**
   * / 通知予約可能かどうか
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean reservable;

  /**
   * / ダウンロード情報
   */
  @WireField(
      tag = 26,
      adapter = "tv.abema.protos.SlotDownload#ADAPTER"
  )
  public final SlotDownload download;

  public ScheduleSlot(String id, String title, Long startAt, Long endAt, List<ScheduleProgram> programs, Long tableStartAt, Long tableEndAt, String highlight, String tableHighlight, String detailHighlight, String content, String displayProgramId, SlotMark mark, SlotFlags flags, String channelId, Long timeshiftEndAt, SlotGroup slotGroup, String hashtag, List<ExtendedLink> links, Long timeshiftFreeEndAt, SlotSharedLink sharedLink, SlotPlayback playback, ExternalContent externalContent, Boolean reservable, SlotDownload download) {
    this(id, title, startAt, endAt, programs, tableStartAt, tableEndAt, highlight, tableHighlight, detailHighlight, content, displayProgramId, mark, flags, channelId, timeshiftEndAt, slotGroup, hashtag, links, timeshiftFreeEndAt, sharedLink, playback, externalContent, reservable, download, ByteString.EMPTY);
  }

  public ScheduleSlot(String id, String title, Long startAt, Long endAt, List<ScheduleProgram> programs, Long tableStartAt, Long tableEndAt, String highlight, String tableHighlight, String detailHighlight, String content, String displayProgramId, SlotMark mark, SlotFlags flags, String channelId, Long timeshiftEndAt, SlotGroup slotGroup, String hashtag, List<ExtendedLink> links, Long timeshiftFreeEndAt, SlotSharedLink sharedLink, SlotPlayback playback, ExternalContent externalContent, Boolean reservable, SlotDownload download, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.title = title;
    this.startAt = startAt;
    this.endAt = endAt;
    this.programs = Internal.immutableCopyOf("programs", programs);
    this.tableStartAt = tableStartAt;
    this.tableEndAt = tableEndAt;
    this.highlight = highlight;
    this.tableHighlight = tableHighlight;
    this.detailHighlight = detailHighlight;
    this.content = content;
    this.displayProgramId = displayProgramId;
    this.mark = mark;
    this.flags = flags;
    this.channelId = channelId;
    this.timeshiftEndAt = timeshiftEndAt;
    this.slotGroup = slotGroup;
    this.hashtag = hashtag;
    this.links = Internal.immutableCopyOf("links", links);
    this.timeshiftFreeEndAt = timeshiftFreeEndAt;
    this.sharedLink = sharedLink;
    this.playback = playback;
    this.externalContent = externalContent;
    this.reservable = reservable;
    this.download = download;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.title = title;
    builder.startAt = startAt;
    builder.endAt = endAt;
    builder.programs = Internal.copyOf("programs", programs);
    builder.tableStartAt = tableStartAt;
    builder.tableEndAt = tableEndAt;
    builder.highlight = highlight;
    builder.tableHighlight = tableHighlight;
    builder.detailHighlight = detailHighlight;
    builder.content = content;
    builder.displayProgramId = displayProgramId;
    builder.mark = mark;
    builder.flags = flags;
    builder.channelId = channelId;
    builder.timeshiftEndAt = timeshiftEndAt;
    builder.slotGroup = slotGroup;
    builder.hashtag = hashtag;
    builder.links = Internal.copyOf("links", links);
    builder.timeshiftFreeEndAt = timeshiftFreeEndAt;
    builder.sharedLink = sharedLink;
    builder.playback = playback;
    builder.externalContent = externalContent;
    builder.reservable = reservable;
    builder.download = download;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ScheduleSlot)) return false;
    ScheduleSlot o = (ScheduleSlot) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(title, o.title)
        && Internal.equals(startAt, o.startAt)
        && Internal.equals(endAt, o.endAt)
        && Internal.equals(programs, o.programs)
        && Internal.equals(tableStartAt, o.tableStartAt)
        && Internal.equals(tableEndAt, o.tableEndAt)
        && Internal.equals(highlight, o.highlight)
        && Internal.equals(tableHighlight, o.tableHighlight)
        && Internal.equals(detailHighlight, o.detailHighlight)
        && Internal.equals(content, o.content)
        && Internal.equals(displayProgramId, o.displayProgramId)
        && Internal.equals(mark, o.mark)
        && Internal.equals(flags, o.flags)
        && Internal.equals(channelId, o.channelId)
        && Internal.equals(timeshiftEndAt, o.timeshiftEndAt)
        && Internal.equals(slotGroup, o.slotGroup)
        && Internal.equals(hashtag, o.hashtag)
        && Internal.equals(links, o.links)
        && Internal.equals(timeshiftFreeEndAt, o.timeshiftFreeEndAt)
        && Internal.equals(sharedLink, o.sharedLink)
        && Internal.equals(playback, o.playback)
        && Internal.equals(externalContent, o.externalContent)
        && Internal.equals(reservable, o.reservable)
        && Internal.equals(download, o.download);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (startAt != null ? startAt.hashCode() : 0);
      result = result * 37 + (endAt != null ? endAt.hashCode() : 0);
      result = result * 37 + (programs != null ? programs.hashCode() : 1);
      result = result * 37 + (tableStartAt != null ? tableStartAt.hashCode() : 0);
      result = result * 37 + (tableEndAt != null ? tableEndAt.hashCode() : 0);
      result = result * 37 + (highlight != null ? highlight.hashCode() : 0);
      result = result * 37 + (tableHighlight != null ? tableHighlight.hashCode() : 0);
      result = result * 37 + (detailHighlight != null ? detailHighlight.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (displayProgramId != null ? displayProgramId.hashCode() : 0);
      result = result * 37 + (mark != null ? mark.hashCode() : 0);
      result = result * 37 + (flags != null ? flags.hashCode() : 0);
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (timeshiftEndAt != null ? timeshiftEndAt.hashCode() : 0);
      result = result * 37 + (slotGroup != null ? slotGroup.hashCode() : 0);
      result = result * 37 + (hashtag != null ? hashtag.hashCode() : 0);
      result = result * 37 + (links != null ? links.hashCode() : 1);
      result = result * 37 + (timeshiftFreeEndAt != null ? timeshiftFreeEndAt.hashCode() : 0);
      result = result * 37 + (sharedLink != null ? sharedLink.hashCode() : 0);
      result = result * 37 + (playback != null ? playback.hashCode() : 0);
      result = result * 37 + (externalContent != null ? externalContent.hashCode() : 0);
      result = result * 37 + (reservable != null ? reservable.hashCode() : 0);
      result = result * 37 + (download != null ? download.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (title != null) builder.append(", title=").append(title);
    if (startAt != null) builder.append(", startAt=").append(startAt);
    if (endAt != null) builder.append(", endAt=").append(endAt);
    if (programs != null) builder.append(", programs=").append(programs);
    if (tableStartAt != null) builder.append(", tableStartAt=").append(tableStartAt);
    if (tableEndAt != null) builder.append(", tableEndAt=").append(tableEndAt);
    if (highlight != null) builder.append(", highlight=").append(highlight);
    if (tableHighlight != null) builder.append(", tableHighlight=").append(tableHighlight);
    if (detailHighlight != null) builder.append(", detailHighlight=").append(detailHighlight);
    if (content != null) builder.append(", content=").append(content);
    if (displayProgramId != null) builder.append(", displayProgramId=").append(displayProgramId);
    if (mark != null) builder.append(", mark=").append(mark);
    if (flags != null) builder.append(", flags=").append(flags);
    if (channelId != null) builder.append(", channelId=").append(channelId);
    if (timeshiftEndAt != null) builder.append(", timeshiftEndAt=").append(timeshiftEndAt);
    if (slotGroup != null) builder.append(", slotGroup=").append(slotGroup);
    if (hashtag != null) builder.append(", hashtag=").append(hashtag);
    if (links != null) builder.append(", links=").append(links);
    if (timeshiftFreeEndAt != null) builder.append(", timeshiftFreeEndAt=").append(timeshiftFreeEndAt);
    if (sharedLink != null) builder.append(", sharedLink=").append(sharedLink);
    if (playback != null) builder.append(", playback=").append(playback);
    if (externalContent != null) builder.append(", externalContent=").append(externalContent);
    if (reservable != null) builder.append(", reservable=").append(reservable);
    if (download != null) builder.append(", download=").append(download);
    return builder.replace(0, 2, "ScheduleSlot{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ScheduleSlot, Builder> {
    public String id;

    public String title;

    public Long startAt;

    public Long endAt;

    public List<ScheduleProgram> programs;

    public Long tableStartAt;

    public Long tableEndAt;

    public String highlight;

    public String tableHighlight;

    public String detailHighlight;

    public String content;

    public String displayProgramId;

    public SlotMark mark;

    public SlotFlags flags;

    public String channelId;

    public Long timeshiftEndAt;

    public SlotGroup slotGroup;

    public String hashtag;

    public List<ExtendedLink> links;

    public Long timeshiftFreeEndAt;

    public SlotSharedLink sharedLink;

    public SlotPlayback playback;

    public ExternalContent externalContent;

    public Boolean reservable;

    public SlotDownload download;

    public Builder() {
      programs = Internal.newMutableList();
      links = Internal.newMutableList();
    }

    /**
     * / 番組枠ID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / 放送枠タイトル
     */
    public Builder title(String title) {
      this.title = title;
      return this;
    }

    /**
     * / 開始時刻
     */
    public Builder startAt(Long startAt) {
      this.startAt = startAt;
      return this;
    }

    /**
     * / 終了時刻
     */
    public Builder endAt(Long endAt) {
      this.endAt = endAt;
      return this;
    }

    /**
     * / 放送番組
     */
    public Builder programs(List<ScheduleProgram> programs) {
      Internal.checkElementsNotNull(programs);
      this.programs = programs;
      return this;
    }

    /**
     * / 番組表上の開始時間
     */
    public Builder tableStartAt(Long tableStartAt) {
      this.tableStartAt = tableStartAt;
      return this;
    }

    /**
     * / 番組表上の終了時間
     */
    public Builder tableEndAt(Long tableEndAt) {
      this.tableEndAt = tableEndAt;
      return this;
    }

    /**
     * / フィードスーパー
     */
    public Builder highlight(String highlight) {
      this.highlight = highlight;
      return this;
    }

    /**
     * / 番組表みどころ
     */
    public Builder tableHighlight(String tableHighlight) {
      this.tableHighlight = tableHighlight;
      return this;
    }

    /**
     * / 番組詳細みどころ
     */
    public Builder detailHighlight(String detailHighlight) {
      this.detailHighlight = detailHighlight;
      return this;
    }

    /**
     * / 詳細情報
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    /**
     * / 複数コンテンツ時の代表ID
     */
    public Builder displayProgramId(String displayProgramId) {
      this.displayProgramId = displayProgramId;
      return this;
    }

    /**
     * / マーク
     */
    public Builder mark(SlotMark mark) {
      this.mark = mark;
      return this;
    }

    /**
     * / フラグ
     */
    public Builder flags(SlotFlags flags) {
      this.flags = flags;
      return this;
    }

    /**
     * / 放送されるチャンネルID
     */
    public Builder channelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * / タイムシフト可能最終日時
     */
    public Builder timeshiftEndAt(Long timeshiftEndAt) {
      this.timeshiftEndAt = timeshiftEndAt;
      return this;
    }

    /**
     * delete groupId = 17;
     * / 放送枠グループ
     */
    public Builder slotGroup(SlotGroup slotGroup) {
      this.slotGroup = slotGroup;
      return this;
    }

    /**
     * / twitterハッシュタグ
     */
    public Builder hashtag(String hashtag) {
      this.hashtag = hashtag;
      return this;
    }

    /**
     * / 拡張リンク
     */
    public Builder links(List<ExtendedLink> links) {
      Internal.checkElementsNotNull(links);
      this.links = links;
      return this;
    }

    /**
     * / タイムシフト無料可能最終日時
     */
    public Builder timeshiftFreeEndAt(Long timeshiftFreeEndAt) {
      this.timeshiftFreeEndAt = timeshiftFreeEndAt;
      return this;
    }

    /**
     * / 共有リンク
     */
    public Builder sharedLink(SlotSharedLink sharedLink) {
      this.sharedLink = sharedLink;
      return this;
    }

    /**
     * / 放送枠の再生情報
     */
    public Builder playback(SlotPlayback playback) {
      this.playback = playback;
      return this;
    }

    /**
     * / 外部コンテンツ情報
     */
    public Builder externalContent(ExternalContent externalContent) {
      this.externalContent = externalContent;
      return this;
    }

    /**
     * / 通知予約可能かどうか
     */
    public Builder reservable(Boolean reservable) {
      this.reservable = reservable;
      return this;
    }

    /**
     * / ダウンロード情報
     */
    public Builder download(SlotDownload download) {
      this.download = download;
      return this;
    }

    @Override
    public ScheduleSlot build() {
      return new ScheduleSlot(id, title, startAt, endAt, programs, tableStartAt, tableEndAt, highlight, tableHighlight, detailHighlight, content, displayProgramId, mark, flags, channelId, timeshiftEndAt, slotGroup, hashtag, links, timeshiftFreeEndAt, sharedLink, playback, externalContent, reservable, download, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ScheduleSlot extends ProtoAdapter<ScheduleSlot> {
    ProtoAdapter_ScheduleSlot() {
      super(FieldEncoding.LENGTH_DELIMITED, ScheduleSlot.class);
    }

    @Override
    public int encodedSize(ScheduleSlot value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.title) : 0)
          + (value.startAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.startAt) : 0)
          + (value.endAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(4, value.endAt) : 0)
          + ScheduleProgram.ADAPTER.asRepeated().encodedSizeWithTag(5, value.programs)
          + (value.tableStartAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(6, value.tableStartAt) : 0)
          + (value.tableEndAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(7, value.tableEndAt) : 0)
          + (value.highlight != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.highlight) : 0)
          + (value.tableHighlight != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.tableHighlight) : 0)
          + (value.detailHighlight != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.detailHighlight) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.content) : 0)
          + (value.displayProgramId != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.displayProgramId) : 0)
          + (value.mark != null ? SlotMark.ADAPTER.encodedSizeWithTag(13, value.mark) : 0)
          + (value.flags != null ? SlotFlags.ADAPTER.encodedSizeWithTag(14, value.flags) : 0)
          + (value.channelId != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.channelId) : 0)
          + (value.timeshiftEndAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(16, value.timeshiftEndAt) : 0)
          + (value.slotGroup != null ? SlotGroup.ADAPTER.encodedSizeWithTag(18, value.slotGroup) : 0)
          + (value.hashtag != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.hashtag) : 0)
          + ExtendedLink.ADAPTER.asRepeated().encodedSizeWithTag(20, value.links)
          + (value.timeshiftFreeEndAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(21, value.timeshiftFreeEndAt) : 0)
          + (value.sharedLink != null ? SlotSharedLink.ADAPTER.encodedSizeWithTag(22, value.sharedLink) : 0)
          + (value.playback != null ? SlotPlayback.ADAPTER.encodedSizeWithTag(23, value.playback) : 0)
          + (value.externalContent != null ? ExternalContent.ADAPTER.encodedSizeWithTag(24, value.externalContent) : 0)
          + (value.reservable != null ? ProtoAdapter.BOOL.encodedSizeWithTag(25, value.reservable) : 0)
          + (value.download != null ? SlotDownload.ADAPTER.encodedSizeWithTag(26, value.download) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ScheduleSlot value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.title);
      if (value.startAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.startAt);
      if (value.endAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 4, value.endAt);
      if (value.programs != null) ScheduleProgram.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.programs);
      if (value.tableStartAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.tableStartAt);
      if (value.tableEndAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.tableEndAt);
      if (value.highlight != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.highlight);
      if (value.tableHighlight != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.tableHighlight);
      if (value.detailHighlight != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.detailHighlight);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.content);
      if (value.displayProgramId != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.displayProgramId);
      if (value.mark != null) SlotMark.ADAPTER.encodeWithTag(writer, 13, value.mark);
      if (value.flags != null) SlotFlags.ADAPTER.encodeWithTag(writer, 14, value.flags);
      if (value.channelId != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.channelId);
      if (value.timeshiftEndAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 16, value.timeshiftEndAt);
      if (value.slotGroup != null) SlotGroup.ADAPTER.encodeWithTag(writer, 18, value.slotGroup);
      if (value.hashtag != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.hashtag);
      if (value.links != null) ExtendedLink.ADAPTER.asRepeated().encodeWithTag(writer, 20, value.links);
      if (value.timeshiftFreeEndAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 21, value.timeshiftFreeEndAt);
      if (value.sharedLink != null) SlotSharedLink.ADAPTER.encodeWithTag(writer, 22, value.sharedLink);
      if (value.playback != null) SlotPlayback.ADAPTER.encodeWithTag(writer, 23, value.playback);
      if (value.externalContent != null) ExternalContent.ADAPTER.encodeWithTag(writer, 24, value.externalContent);
      if (value.reservable != null) ProtoAdapter.BOOL.encodeWithTag(writer, 25, value.reservable);
      if (value.download != null) SlotDownload.ADAPTER.encodeWithTag(writer, 26, value.download);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ScheduleSlot decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.startAt(ProtoAdapter.INT64.decode(reader)); break;
          case 4: builder.endAt(ProtoAdapter.INT64.decode(reader)); break;
          case 5: builder.programs.add(ScheduleProgram.ADAPTER.decode(reader)); break;
          case 6: builder.tableStartAt(ProtoAdapter.INT64.decode(reader)); break;
          case 7: builder.tableEndAt(ProtoAdapter.INT64.decode(reader)); break;
          case 8: builder.highlight(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.tableHighlight(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.detailHighlight(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.displayProgramId(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.mark(SlotMark.ADAPTER.decode(reader)); break;
          case 14: builder.flags(SlotFlags.ADAPTER.decode(reader)); break;
          case 15: builder.channelId(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.timeshiftEndAt(ProtoAdapter.INT64.decode(reader)); break;
          case 18: builder.slotGroup(SlotGroup.ADAPTER.decode(reader)); break;
          case 19: builder.hashtag(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.links.add(ExtendedLink.ADAPTER.decode(reader)); break;
          case 21: builder.timeshiftFreeEndAt(ProtoAdapter.INT64.decode(reader)); break;
          case 22: builder.sharedLink(SlotSharedLink.ADAPTER.decode(reader)); break;
          case 23: builder.playback(SlotPlayback.ADAPTER.decode(reader)); break;
          case 24: builder.externalContent(ExternalContent.ADAPTER.decode(reader)); break;
          case 25: builder.reservable(ProtoAdapter.BOOL.decode(reader)); break;
          case 26: builder.download(SlotDownload.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ScheduleSlot redact(ScheduleSlot value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.programs, ScheduleProgram.ADAPTER);
      if (builder.mark != null) builder.mark = SlotMark.ADAPTER.redact(builder.mark);
      if (builder.flags != null) builder.flags = SlotFlags.ADAPTER.redact(builder.flags);
      if (builder.slotGroup != null) builder.slotGroup = SlotGroup.ADAPTER.redact(builder.slotGroup);
      Internal.redactElements(builder.links, ExtendedLink.ADAPTER);
      if (builder.sharedLink != null) builder.sharedLink = SlotSharedLink.ADAPTER.redact(builder.sharedLink);
      if (builder.playback != null) builder.playback = SlotPlayback.ADAPTER.redact(builder.playback);
      if (builder.externalContent != null) builder.externalContent = ExternalContent.ADAPTER.redact(builder.externalContent);
      if (builder.download != null) builder.download = SlotDownload.ADAPTER.redact(builder.download);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
