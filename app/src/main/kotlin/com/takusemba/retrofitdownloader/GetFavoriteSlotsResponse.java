// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/favorite.proto at 18:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / GetFavoriteSlotsResponse represents a response of getting favorite slots.
 */
public final class GetFavoriteSlotsResponse extends Message<GetFavoriteSlotsResponse, GetFavoriteSlotsResponse.Builder> {
  public static final ProtoAdapter<GetFavoriteSlotsResponse> ADAPTER = new ProtoAdapter_GetFavoriteSlotsResponse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_COUNT = 0L;

  /**
   * / Favorite slots.
   */
  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.FavoriteSlot#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<FavoriteSlot> slots;

  /**
   * / Total count(deprecated).
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long count;

  /**
   * / Paging.
   */
  @WireField(
      tag = 3,
      adapter = "tv.abema.protos.GetFavoriteSlotsResponse$Paging#ADAPTER"
  )
  public final Paging paging;

  /**
   * / Data set.
   */
  @WireField(
      tag = 10,
      adapter = "tv.abema.protos.DataSet#ADAPTER"
  )
  public final DataSet dataSet;

  public GetFavoriteSlotsResponse(List<FavoriteSlot> slots, Long count, Paging paging, DataSet dataSet) {
    this(slots, count, paging, dataSet, ByteString.EMPTY);
  }

  public GetFavoriteSlotsResponse(List<FavoriteSlot> slots, Long count, Paging paging, DataSet dataSet, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.slots = Internal.immutableCopyOf("slots", slots);
    this.count = count;
    this.paging = paging;
    this.dataSet = dataSet;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.slots = Internal.copyOf("slots", slots);
    builder.count = count;
    builder.paging = paging;
    builder.dataSet = dataSet;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetFavoriteSlotsResponse)) return false;
    GetFavoriteSlotsResponse o = (GetFavoriteSlotsResponse) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(slots, o.slots)
        && Internal.equals(count, o.count)
        && Internal.equals(paging, o.paging)
        && Internal.equals(dataSet, o.dataSet);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (slots != null ? slots.hashCode() : 1);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (paging != null ? paging.hashCode() : 0);
      result = result * 37 + (dataSet != null ? dataSet.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (slots != null) builder.append(", slots=").append(slots);
    if (count != null) builder.append(", count=").append(count);
    if (paging != null) builder.append(", paging=").append(paging);
    if (dataSet != null) builder.append(", dataSet=").append(dataSet);
    return builder.replace(0, 2, "GetFavoriteSlotsResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetFavoriteSlotsResponse, Builder> {
    public List<FavoriteSlot> slots;

    public Long count;

    public Paging paging;

    public DataSet dataSet;

    public Builder() {
      slots = Internal.newMutableList();
    }

    /**
     * / Favorite slots.
     */
    public Builder slots(List<FavoriteSlot> slots) {
      Internal.checkElementsNotNull(slots);
      this.slots = slots;
      return this;
    }

    /**
     * / Total count(deprecated).
     */
    public Builder count(Long count) {
      this.count = count;
      return this;
    }

    /**
     * / Paging.
     */
    public Builder paging(Paging paging) {
      this.paging = paging;
      return this;
    }

    /**
     * / Data set.
     */
    public Builder dataSet(DataSet dataSet) {
      this.dataSet = dataSet;
      return this;
    }

    @Override
    public GetFavoriteSlotsResponse build() {
      return new GetFavoriteSlotsResponse(slots, count, paging, dataSet, buildUnknownFields());
    }
  }

  public static final class Paging extends Message<Paging, Paging.Builder> {
    public static final ProtoAdapter<Paging> ADAPTER = new ProtoAdapter_Paging();

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_PREVIOUS = "";

    public static final String DEFAULT_NEXT = "";

    /**
     * / A paging parameter for getting previous favorite slots.
     */
    @WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String previous;

    /**
     * / A paging parameter for getting next favorite slots.
     */
    @WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public final String next;

    public Paging(String previous, String next) {
      this(previous, next, ByteString.EMPTY);
    }

    public Paging(String previous, String next, ByteString unknownFields) {
      super(ADAPTER, unknownFields);
      this.previous = previous;
      this.next = next;
    }

    @Override
    public Builder newBuilder() {
      Builder builder = new Builder();
      builder.previous = previous;
      builder.next = next;
      builder.addUnknownFields(unknownFields());
      return builder;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Paging)) return false;
      Paging o = (Paging) other;
      return Internal.equals(unknownFields(), o.unknownFields())
          && Internal.equals(previous, o.previous)
          && Internal.equals(next, o.next);
    }

    @Override
    public int hashCode() {
      int result = super.hashCode;
      if (result == 0) {
        result = unknownFields().hashCode();
        result = result * 37 + (previous != null ? previous.hashCode() : 0);
        result = result * 37 + (next != null ? next.hashCode() : 0);
        super.hashCode = result;
      }
      return result;
    }

    @Override
    public String toString() {
      StringBuilder builder = new StringBuilder();
      if (previous != null) builder.append(", previous=").append(previous);
      if (next != null) builder.append(", next=").append(next);
      return builder.replace(0, 2, "Paging{").append('}').toString();
    }

    public static final class Builder extends Message.Builder<Paging, Builder> {
      public String previous;

      public String next;

      public Builder() {
      }

      /**
       * / A paging parameter for getting previous favorite slots.
       */
      public Builder previous(String previous) {
        this.previous = previous;
        return this;
      }

      /**
       * / A paging parameter for getting next favorite slots.
       */
      public Builder next(String next) {
        this.next = next;
        return this;
      }

      @Override
      public Paging build() {
        return new Paging(previous, next, buildUnknownFields());
      }
    }

    private static final class ProtoAdapter_Paging extends ProtoAdapter<Paging> {
      ProtoAdapter_Paging() {
        super(FieldEncoding.LENGTH_DELIMITED, Paging.class);
      }

      @Override
      public int encodedSize(Paging value) {
        return (value.previous != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.previous) : 0)
            + (value.next != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.next) : 0)
            + value.unknownFields().size();
      }

      @Override
      public void encode(ProtoWriter writer, Paging value) throws IOException {
        if (value.previous != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.previous);
        if (value.next != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.next);
        writer.writeBytes(value.unknownFields());
      }

      @Override
      public Paging decode(ProtoReader reader) throws IOException {
        Builder builder = new Builder();
        long token = reader.beginMessage();
        for (int tag; (tag = reader.nextTag()) != -1;) {
          switch (tag) {
            case 1: builder.previous(ProtoAdapter.STRING.decode(reader)); break;
            case 2: builder.next(ProtoAdapter.STRING.decode(reader)); break;
            default: {
              FieldEncoding fieldEncoding = reader.peekFieldEncoding();
              Object value = fieldEncoding.rawProtoAdapter().decode(reader);
              builder.addUnknownField(tag, fieldEncoding, value);
            }
          }
        }
        reader.endMessage(token);
        return builder.build();
      }

      @Override
      public Paging redact(Paging value) {
        Builder builder = value.newBuilder();
        builder.clearUnknownFields();
        return builder.build();
      }
    }
  }

  private static final class ProtoAdapter_GetFavoriteSlotsResponse extends ProtoAdapter<GetFavoriteSlotsResponse> {
    ProtoAdapter_GetFavoriteSlotsResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, GetFavoriteSlotsResponse.class);
    }

    @Override
    public int encodedSize(GetFavoriteSlotsResponse value) {
      return FavoriteSlot.ADAPTER.asRepeated().encodedSizeWithTag(1, value.slots)
          + (value.count != null ? ProtoAdapter.INT64.encodedSizeWithTag(2, value.count) : 0)
          + (value.paging != null ? Paging.ADAPTER.encodedSizeWithTag(3, value.paging) : 0)
          + (value.dataSet != null ? DataSet.ADAPTER.encodedSizeWithTag(10, value.dataSet) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetFavoriteSlotsResponse value) throws IOException {
      if (value.slots != null) FavoriteSlot.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.slots);
      if (value.count != null) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.count);
      if (value.paging != null) Paging.ADAPTER.encodeWithTag(writer, 3, value.paging);
      if (value.dataSet != null) DataSet.ADAPTER.encodeWithTag(writer, 10, value.dataSet);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetFavoriteSlotsResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.slots.add(FavoriteSlot.ADAPTER.decode(reader)); break;
          case 2: builder.count(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.paging(Paging.ADAPTER.decode(reader)); break;
          case 10: builder.dataSet(DataSet.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetFavoriteSlotsResponse redact(GetFavoriteSlotsResponse value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.slots, FavoriteSlot.ADAPTER);
      if (builder.paging != null) builder.paging = Paging.ADAPTER.redact(builder.paging);
      if (builder.dataSet != null) builder.dataSet = DataSet.ADAPTER.redact(builder.dataSet);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
