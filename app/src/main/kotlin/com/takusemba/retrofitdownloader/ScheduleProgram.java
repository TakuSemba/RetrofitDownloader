// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/media.proto at 190:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * / 番組情報（シリーズ情報がネストされている）
 */
public final class ScheduleProgram extends Message<ScheduleProgram, ScheduleProgram.Builder> {
  public static final ProtoAdapter<ScheduleProgram> ADAPTER = new ProtoAdapter_ScheduleProgram();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  /**
   * / 番組ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  /**
   * / 番組エピソード情報
   */
  @WireField(
      tag = 3,
      adapter = "tv.abema.protos.ProgramEpisode#ADAPTER"
  )
  public final ProgramEpisode episode;

  /**
   * / 番組クレジット情報
   */
  @WireField(
      tag = 4,
      adapter = "tv.abema.protos.ProgramCredit#ADAPTER"
  )
  public final ProgramCredit credit;

  /**
   * / シリーズ情報
   */
  @WireField(
      tag = 5,
      adapter = "tv.abema.protos.Series#ADAPTER"
  )
  public final Series series;

  /**
   * / 番組納品情報
   */
  @WireField(
      tag = 6,
      adapter = "tv.abema.protos.ProgramProvidedInfo#ADAPTER"
  )
  public final ProgramProvidedInfo providedInfo;

  public ScheduleProgram(String id, ProgramEpisode episode, ProgramCredit credit, Series series, ProgramProvidedInfo providedInfo) {
    this(id, episode, credit, series, providedInfo, ByteString.EMPTY);
  }

  public ScheduleProgram(String id, ProgramEpisode episode, ProgramCredit credit, Series series, ProgramProvidedInfo providedInfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.episode = episode;
    this.credit = credit;
    this.series = series;
    this.providedInfo = providedInfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.episode = episode;
    builder.credit = credit;
    builder.series = series;
    builder.providedInfo = providedInfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ScheduleProgram)) return false;
    ScheduleProgram o = (ScheduleProgram) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(episode, o.episode)
        && Internal.equals(credit, o.credit)
        && Internal.equals(series, o.series)
        && Internal.equals(providedInfo, o.providedInfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (episode != null ? episode.hashCode() : 0);
      result = result * 37 + (credit != null ? credit.hashCode() : 0);
      result = result * 37 + (series != null ? series.hashCode() : 0);
      result = result * 37 + (providedInfo != null ? providedInfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (episode != null) builder.append(", episode=").append(episode);
    if (credit != null) builder.append(", credit=").append(credit);
    if (series != null) builder.append(", series=").append(series);
    if (providedInfo != null) builder.append(", providedInfo=").append(providedInfo);
    return builder.replace(0, 2, "ScheduleProgram{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ScheduleProgram, Builder> {
    public String id;

    public ProgramEpisode episode;

    public ProgramCredit credit;

    public Series series;

    public ProgramProvidedInfo providedInfo;

    public Builder() {
    }

    /**
     * / 番組ID
     */
    public Builder id(String id) {
      this.id = id;
      return this;
    }

    /**
     * / 番組エピソード情報
     */
    public Builder episode(ProgramEpisode episode) {
      this.episode = episode;
      return this;
    }

    /**
     * / 番組クレジット情報
     */
    public Builder credit(ProgramCredit credit) {
      this.credit = credit;
      return this;
    }

    /**
     * / シリーズ情報
     */
    public Builder series(Series series) {
      this.series = series;
      return this;
    }

    /**
     * / 番組納品情報
     */
    public Builder providedInfo(ProgramProvidedInfo providedInfo) {
      this.providedInfo = providedInfo;
      return this;
    }

    @Override
    public ScheduleProgram build() {
      return new ScheduleProgram(id, episode, credit, series, providedInfo, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ScheduleProgram extends ProtoAdapter<ScheduleProgram> {
    ProtoAdapter_ScheduleProgram() {
      super(FieldEncoding.LENGTH_DELIMITED, ScheduleProgram.class);
    }

    @Override
    public int encodedSize(ScheduleProgram value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.episode != null ? ProgramEpisode.ADAPTER.encodedSizeWithTag(3, value.episode) : 0)
          + (value.credit != null ? ProgramCredit.ADAPTER.encodedSizeWithTag(4, value.credit) : 0)
          + (value.series != null ? Series.ADAPTER.encodedSizeWithTag(5, value.series) : 0)
          + (value.providedInfo != null ? ProgramProvidedInfo.ADAPTER.encodedSizeWithTag(6, value.providedInfo) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ScheduleProgram value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.episode != null) ProgramEpisode.ADAPTER.encodeWithTag(writer, 3, value.episode);
      if (value.credit != null) ProgramCredit.ADAPTER.encodeWithTag(writer, 4, value.credit);
      if (value.series != null) Series.ADAPTER.encodeWithTag(writer, 5, value.series);
      if (value.providedInfo != null) ProgramProvidedInfo.ADAPTER.encodeWithTag(writer, 6, value.providedInfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ScheduleProgram decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.episode(ProgramEpisode.ADAPTER.decode(reader)); break;
          case 4: builder.credit(ProgramCredit.ADAPTER.decode(reader)); break;
          case 5: builder.series(Series.ADAPTER.decode(reader)); break;
          case 6: builder.providedInfo(ProgramProvidedInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ScheduleProgram redact(ScheduleProgram value) {
      Builder builder = value.newBuilder();
      if (builder.episode != null) builder.episode = ProgramEpisode.ADAPTER.redact(builder.episode);
      if (builder.credit != null) builder.credit = ProgramCredit.ADAPTER.redact(builder.credit);
      if (builder.series != null) builder.series = Series.ADAPTER.redact(builder.series);
      if (builder.providedInfo != null) builder.providedInfo = ProgramProvidedInfo.ADAPTER.redact(builder.providedInfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
