// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/business_contact.proto at 11:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / 法人向けお問合わせ
 */
public final class BusinessContact extends Message<BusinessContact, BusinessContact.Builder> {
  public static final ProtoAdapter<BusinessContact> ADAPTER = new ProtoAdapter_BusinessContact();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_DESCRIPTION = "";

  /**
   * / 説明
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String description;

  /**
   * / 問い合わせリスト
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.Contact#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Contact> contacts;

  public BusinessContact(String description, List<Contact> contacts) {
    this(description, contacts, ByteString.EMPTY);
  }

  public BusinessContact(String description, List<Contact> contacts, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.description = description;
    this.contacts = Internal.immutableCopyOf("contacts", contacts);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.description = description;
    builder.contacts = Internal.copyOf("contacts", contacts);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BusinessContact)) return false;
    BusinessContact o = (BusinessContact) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(description, o.description)
        && Internal.equals(contacts, o.contacts);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (description != null ? description.hashCode() : 0);
      result = result * 37 + (contacts != null ? contacts.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (description != null) builder.append(", description=").append(description);
    if (contacts != null) builder.append(", contacts=").append(contacts);
    return builder.replace(0, 2, "BusinessContact{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<BusinessContact, Builder> {
    public String description;

    public List<Contact> contacts;

    public Builder() {
      contacts = Internal.newMutableList();
    }

    /**
     * / 説明
     */
    public Builder description(String description) {
      this.description = description;
      return this;
    }

    /**
     * / 問い合わせリスト
     */
    public Builder contacts(List<Contact> contacts) {
      Internal.checkElementsNotNull(contacts);
      this.contacts = contacts;
      return this;
    }

    @Override
    public BusinessContact build() {
      return new BusinessContact(description, contacts, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_BusinessContact extends ProtoAdapter<BusinessContact> {
    ProtoAdapter_BusinessContact() {
      super(FieldEncoding.LENGTH_DELIMITED, BusinessContact.class);
    }

    @Override
    public int encodedSize(BusinessContact value) {
      return (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.description) : 0)
          + Contact.ADAPTER.asRepeated().encodedSizeWithTag(2, value.contacts)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, BusinessContact value) throws IOException {
      if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.description);
      if (value.contacts != null) Contact.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.contacts);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public BusinessContact decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.description(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.contacts.add(Contact.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public BusinessContact redact(BusinessContact value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.contacts, Contact.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
