// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/media.proto at 84:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / チャネルスケジュール情報
 */
public final class ChannelSchedule extends Message<ChannelSchedule, ChannelSchedule.Builder> {
  public static final ProtoAdapter<ChannelSchedule> ADAPTER = new ProtoAdapter_ChannelSchedule();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_CHANNELID = "";

  public static final String DEFAULT_DATE = "";

  /**
   * / チャネルID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String channelId;

  /**
   * / 日付(YYYYMMDD)
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String date;

  /**
   * / 番組枠一覧
   */
  @WireField(
      tag = 3,
      adapter = "tv.abema.protos.ScheduleSlot#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ScheduleSlot> slots;

  public ChannelSchedule(String channelId, String date, List<ScheduleSlot> slots) {
    this(channelId, date, slots, ByteString.EMPTY);
  }

  public ChannelSchedule(String channelId, String date, List<ScheduleSlot> slots, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.channelId = channelId;
    this.date = date;
    this.slots = Internal.immutableCopyOf("slots", slots);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.channelId = channelId;
    builder.date = date;
    builder.slots = Internal.copyOf("slots", slots);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChannelSchedule)) return false;
    ChannelSchedule o = (ChannelSchedule) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(channelId, o.channelId)
        && Internal.equals(date, o.date)
        && Internal.equals(slots, o.slots);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (date != null ? date.hashCode() : 0);
      result = result * 37 + (slots != null ? slots.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (channelId != null) builder.append(", channelId=").append(channelId);
    if (date != null) builder.append(", date=").append(date);
    if (slots != null) builder.append(", slots=").append(slots);
    return builder.replace(0, 2, "ChannelSchedule{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ChannelSchedule, Builder> {
    public String channelId;

    public String date;

    public List<ScheduleSlot> slots;

    public Builder() {
      slots = Internal.newMutableList();
    }

    /**
     * / チャネルID
     */
    public Builder channelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * / 日付(YYYYMMDD)
     */
    public Builder date(String date) {
      this.date = date;
      return this;
    }

    /**
     * / 番組枠一覧
     */
    public Builder slots(List<ScheduleSlot> slots) {
      Internal.checkElementsNotNull(slots);
      this.slots = slots;
      return this;
    }

    @Override
    public ChannelSchedule build() {
      return new ChannelSchedule(channelId, date, slots, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ChannelSchedule extends ProtoAdapter<ChannelSchedule> {
    ProtoAdapter_ChannelSchedule() {
      super(FieldEncoding.LENGTH_DELIMITED, ChannelSchedule.class);
    }

    @Override
    public int encodedSize(ChannelSchedule value) {
      return (value.channelId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.channelId) : 0)
          + (value.date != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.date) : 0)
          + ScheduleSlot.ADAPTER.asRepeated().encodedSizeWithTag(3, value.slots)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ChannelSchedule value) throws IOException {
      if (value.channelId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.channelId);
      if (value.date != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.date);
      if (value.slots != null) ScheduleSlot.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.slots);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ChannelSchedule decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.channelId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.date(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.slots.add(ScheduleSlot.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ChannelSchedule redact(ChannelSchedule value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.slots, ScheduleSlot.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
