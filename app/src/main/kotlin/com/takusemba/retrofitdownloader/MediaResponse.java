// Code generated by Wire protocol buffer compiler, do not edit.
// test Source file: api/media.proto at 260:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / 番組情報取得 response test test
 */
public final class MediaResponse extends Message<MediaResponse, MediaResponse.Builder> {
  public static final ProtoAdapter<MediaResponse> ADAPTER = new ProtoAdapter_MediaResponse();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_VERSION = "";

  /**
   * / チャネル情報
   */
  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.Channel#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Channel> channels;

  /**
   * / チャネルスケジュール情報
   */
  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.ChannelSchedule#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ChannelSchedule> channelSchedules;

  /**
   * / デフォルト指定時に返却する日付(YYYYMMDD)の一覧
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> availableDates;

  /**
   * / スナップショットバージョン
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String version;

  public MediaResponse(List<Channel> channels, List<ChannelSchedule> channelSchedules, List<String> availableDates, String version) {
    this(channels, channelSchedules, availableDates, version, ByteString.EMPTY);
  }

  public MediaResponse(List<Channel> channels, List<ChannelSchedule> channelSchedules, List<String> availableDates, String version, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.channels = Internal.immutableCopyOf("channels", channels);
    this.channelSchedules = Internal.immutableCopyOf("channelSchedules", channelSchedules);
    this.availableDates = Internal.immutableCopyOf("availableDates", availableDates);
    this.version = version;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.channels = Internal.copyOf("channels", channels);
    builder.channelSchedules = Internal.copyOf("channelSchedules", channelSchedules);
    builder.availableDates = Internal.copyOf("availableDates", availableDates);
    builder.version = version;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MediaResponse)) return false;
    MediaResponse o = (MediaResponse) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(channels, o.channels)
        && Internal.equals(channelSchedules, o.channelSchedules)
        && Internal.equals(availableDates, o.availableDates)
        && Internal.equals(version, o.version);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (channels != null ? channels.hashCode() : 1);
      result = result * 37 + (channelSchedules != null ? channelSchedules.hashCode() : 1);
      result = result * 37 + (availableDates != null ? availableDates.hashCode() : 1);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (channels != null) builder.append(", channels=").append(channels);
    if (channelSchedules != null) builder.append(", channelSchedules=").append(channelSchedules);
    if (availableDates != null) builder.append(", availableDates=").append(availableDates);
    if (version != null) builder.append(", version=").append(version);
    return builder.replace(0, 2, "MediaResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<MediaResponse, Builder> {
    public List<Channel> channels;

    public List<ChannelSchedule> channelSchedules;

    public List<String> availableDates;

    public String version;

    public Builder() {
      channels = Internal.newMutableList();
      channelSchedules = Internal.newMutableList();
      availableDates = Internal.newMutableList();
    }

    /**
     * / チャネル情報
     */
    public Builder channels(List<Channel> channels) {
      Internal.checkElementsNotNull(channels);
      this.channels = channels;
      return this;
    }

    /**
     * / チャネルスケジュール情報
     */
    public Builder channelSchedules(List<ChannelSchedule> channelSchedules) {
      Internal.checkElementsNotNull(channelSchedules);
      this.channelSchedules = channelSchedules;
      return this;
    }

    /**
     * / デフォルト指定時に返却する日付(YYYYMMDD)の一覧
     */
    public Builder availableDates(List<String> availableDates) {
      Internal.checkElementsNotNull(availableDates);
      this.availableDates = availableDates;
      return this;
    }

    /**
     * / スナップショットバージョン
     */
    public Builder version(String version) {
      this.version = version;
      return this;
    }

    @Override
    public MediaResponse build() {
      return new MediaResponse(channels, channelSchedules, availableDates, version, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_MediaResponse extends ProtoAdapter<MediaResponse> {
    ProtoAdapter_MediaResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, MediaResponse.class);
    }

    @Override
    public int encodedSize(MediaResponse value) {
      return Channel.ADAPTER.asRepeated().encodedSizeWithTag(1, value.channels)
          + ChannelSchedule.ADAPTER.asRepeated().encodedSizeWithTag(2, value.channelSchedules)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.availableDates)
          + (value.version != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.version) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, MediaResponse value) throws IOException {
      if (value.channels != null) Channel.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.channels);
      if (value.channelSchedules != null) ChannelSchedule.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.channelSchedules);
      if (value.availableDates != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.availableDates);
      if (value.version != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.version);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public MediaResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.channels.add(Channel.ADAPTER.decode(reader)); break;
          case 2: builder.channelSchedules.add(ChannelSchedule.ADAPTER.decode(reader)); break;
          case 3: builder.availableDates.add(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.version(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public MediaResponse redact(MediaResponse value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.channels, Channel.ADAPTER);
      Internal.redactElements(builder.channelSchedules, ChannelSchedule.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
