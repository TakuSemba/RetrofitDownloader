// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: api/ranking.proto at 34:1
package tv.abema.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * / RankingResponse for ranking api.
 */
public final class RankingResponse extends Message<RankingResponse, RankingResponse.Builder> {
  public static final ProtoAdapter<RankingResponse> ADAPTER = new ProtoAdapter_RankingResponse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UPDATEDAT = 0L;

  @WireField(
      tag = 1,
      adapter = "tv.abema.protos.Channel#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Channel> channels;

  @WireField(
      tag = 2,
      adapter = "tv.abema.protos.RankingSlot#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<RankingSlot> slots;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long updatedAt;

  public RankingResponse(List<Channel> channels, List<RankingSlot> slots, Long updatedAt) {
    this(channels, slots, updatedAt, ByteString.EMPTY);
  }

  public RankingResponse(List<Channel> channels, List<RankingSlot> slots, Long updatedAt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.channels = Internal.immutableCopyOf("channels", channels);
    this.slots = Internal.immutableCopyOf("slots", slots);
    this.updatedAt = updatedAt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.channels = Internal.copyOf("channels", channels);
    builder.slots = Internal.copyOf("slots", slots);
    builder.updatedAt = updatedAt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RankingResponse)) return false;
    RankingResponse o = (RankingResponse) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(channels, o.channels)
        && Internal.equals(slots, o.slots)
        && Internal.equals(updatedAt, o.updatedAt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (channels != null ? channels.hashCode() : 1);
      result = result * 37 + (slots != null ? slots.hashCode() : 1);
      result = result * 37 + (updatedAt != null ? updatedAt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (channels != null) builder.append(", channels=").append(channels);
    if (slots != null) builder.append(", slots=").append(slots);
    if (updatedAt != null) builder.append(", updatedAt=").append(updatedAt);
    return builder.replace(0, 2, "RankingResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RankingResponse, Builder> {
    public List<Channel> channels;

    public List<RankingSlot> slots;

    public Long updatedAt;

    public Builder() {
      channels = Internal.newMutableList();
      slots = Internal.newMutableList();
    }

    public Builder channels(List<Channel> channels) {
      Internal.checkElementsNotNull(channels);
      this.channels = channels;
      return this;
    }

    public Builder slots(List<RankingSlot> slots) {
      Internal.checkElementsNotNull(slots);
      this.slots = slots;
      return this;
    }

    public Builder updatedAt(Long updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    @Override
    public RankingResponse build() {
      return new RankingResponse(channels, slots, updatedAt, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RankingResponse extends ProtoAdapter<RankingResponse> {
    ProtoAdapter_RankingResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, RankingResponse.class);
    }

    @Override
    public int encodedSize(RankingResponse value) {
      return Channel.ADAPTER.asRepeated().encodedSizeWithTag(1, value.channels)
          + RankingSlot.ADAPTER.asRepeated().encodedSizeWithTag(2, value.slots)
          + (value.updatedAt != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.updatedAt) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RankingResponse value) throws IOException {
      if (value.channels != null) Channel.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.channels);
      if (value.slots != null) RankingSlot.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.slots);
      if (value.updatedAt != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.updatedAt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RankingResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.channels.add(Channel.ADAPTER.decode(reader)); break;
          case 2: builder.slots.add(RankingSlot.ADAPTER.decode(reader)); break;
          case 3: builder.updatedAt(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RankingResponse redact(RankingResponse value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.channels, Channel.ADAPTER);
      Internal.redactElements(builder.slots, RankingSlot.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
